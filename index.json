{
  "api/Virtlink.Utilib.Collections.Collection.html": {
    "href": "api/Virtlink.Utilib.Collections.Collection.html",
    "title": "Class Collection | Virtlink Utilib library",
    "keywords": "Class Collection Functions for working with collections. Inheritance System.Object Collection Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Virtlink.Utilib.Collections Assembly : Virtlink.Utilib.dll Syntax public static class Collection Methods | Improve this Doc View Source Empty<T>() Returns a read-only empty collection. Declaration public static IReadOnlyCollection<T> Empty<T>() Returns Type Description System.Collections.Generic.IReadOnlyCollection <T> The read-only empty collection. Type Parameters Name Description T The type of elements in the collection."
  },
  "api/Virtlink.Utilib.html": {
    "href": "api/Virtlink.Utilib.html",
    "title": "Namespace Virtlink.Utilib | Virtlink Utilib library",
    "keywords": "Namespace Virtlink.Utilib Classes BinaryMath Binary and bit-wise math operations, and operations that use powers of two. Chars Functions for working with characters. EnumArgumentException Exception thrown when using an invalid enum value. IntegerMath Math operations on integers. Numeric Methods for working with numbers. StringExt Extension methods for working with strings."
  },
  "api/Virtlink.Utilib.Threading.html": {
    "href": "api/Virtlink.Utilib.Threading.html",
    "title": "Namespace Virtlink.Utilib.Threading | Virtlink Utilib library",
    "keywords": "Namespace Virtlink.Utilib.Threading Classes ReaderWriterLockSlimExtensions Extension methods for working with System.Threading.ReaderWriterLockSlim objects."
  },
  "api/Virtlink.Utilib.Threading.Tasks.html": {
    "href": "api/Virtlink.Utilib.Threading.Tasks.html",
    "title": "Namespace Virtlink.Utilib.Threading.Tasks | Virtlink Utilib library",
    "keywords": "Namespace Virtlink.Utilib.Threading.Tasks Classes TaskExt Extension methods for working with tasks."
  },
  "api/Virtlink.Utilib.Text.html": {
    "href": "api/Virtlink.Utilib.Text.html",
    "title": "Namespace Virtlink.Utilib.Text | Virtlink Utilib library",
    "keywords": "Namespace Virtlink.Utilib.Text Classes CodePointSet A set of code points. PathEncoding Path encoding. UriEncoding URI encoding. Structs CodePoint A code point. Interfaces IStringEncoding A string encoding."
  },
  "api/Virtlink.Utilib.Text.UriEncoding.html": {
    "href": "api/Virtlink.Utilib.Text.UriEncoding.html",
    "title": "Class UriEncoding | Virtlink Utilib library",
    "keywords": "Class UriEncoding URI encoding. Inheritance System.Object PathEncoding UriEncoding Implements IStringEncoding Inherited Members PathEncoding.IsAllowedName(String) PathEncoding.Encode(String) PathEncoding.Decode(String) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Virtlink.Utilib.Text Assembly : Virtlink.Utilib.dll Syntax public class UriEncoding : PathEncoding, IStringEncoding Methods | Improve this Doc View Source IsAllowedCharacter(Char) Determines whether the specified character is allowed unencoded. Declaration protected override bool IsAllowedCharacter(char c) Parameters Type Name Description System.Char c The character to test. Returns Type Description System.Boolean true when the character is allowed unencoded; otherwise, false . Overrides PathEncoding.IsAllowedCharacter(Char) Implements IStringEncoding"
  },
  "api/Virtlink.Utilib.Text.PathEncoding.html": {
    "href": "api/Virtlink.Utilib.Text.PathEncoding.html",
    "title": "Class PathEncoding | Virtlink Utilib library",
    "keywords": "Class PathEncoding Path encoding. Inheritance System.Object PathEncoding UriEncoding Implements IStringEncoding Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Virtlink.Utilib.Text Assembly : Virtlink.Utilib.dll Syntax public class PathEncoding : IStringEncoding Methods | Improve this Doc View Source Decode(String) Decodes the specified string. Declaration public string Decode(string encoded) Parameters Type Name Description System.String encoded The encoded string. Returns Type Description System.String The unencoded string. | Improve this Doc View Source Encode(String) Encodes the specified string. Declaration public string Encode(string unencoded) Parameters Type Name Description System.String unencoded The unencoded string. Returns Type Description System.String The encoded string. | Improve this Doc View Source IsAllowedCharacter(Char) Determines whether the specified character is allowed unencoded. Declaration protected virtual bool IsAllowedCharacter(char c) Parameters Type Name Description System.Char c The character to test. Returns Type Description System.Boolean true when the character is allowed unencoded; otherwise, false . | Improve this Doc View Source IsAllowedName(String) Determines whether the specified name is allowed unencoded. Declaration protected virtual bool IsAllowedName(string name) Parameters Type Name Description System.String name The name to test. Returns Type Description System.Boolean true when the name is allowed unencoded; otherwise, false . Remarks This method doesn't have to take into account whether the name contains non-allowed characters. Implements IStringEncoding"
  },
  "api/Virtlink.Utilib.Collections.Queues.html": {
    "href": "api/Virtlink.Utilib.Collections.Queues.html",
    "title": "Class Queues | Virtlink Utilib library",
    "keywords": "Class Queues Functions for working with queues. Inheritance System.Object Queues Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Virtlink.Utilib.Collections Assembly : Virtlink.Utilib.dll Syntax public static class Queues Methods | Improve this Doc View Source EnqueueRange<T>(Queue<T>, IEnumerable<T>) Enqueues a range of elements onto the queue. Declaration public static void EnqueueRange<T>(this Queue<T> queue, IEnumerable<T> elements) Parameters Type Name Description System.Collections.Generic.Queue <T> queue The queue. System.Collections.Generic.IEnumerable <T> elements The elements to enqueue. Type Parameters Name Description T The type of elements. Remarks The first element is enqueued first. | Improve this Doc View Source PeekOrDefault<T>(Queue<T>) Returns the front element of the queue without removing it; or returns the default value when the queue is empty. Declaration public static T PeekOrDefault<T>(this Queue<T> queue) Parameters Type Name Description System.Collections.Generic.Queue <T> queue The queue. Returns Type Description T The front element of the queue; or the default value of T . Type Parameters Name Description T The type of elements."
  },
  "api/Virtlink.Utilib.Collections.ListSlice-1.html": {
    "href": "api/Virtlink.Utilib.Collections.ListSlice-1.html",
    "title": "Class ListSlice<T> | Virtlink Utilib library",
    "keywords": "Class ListSlice<T> A slice of a read-only list. Inheritance System.Object ListSlice<T> Implements System.Collections.Generic.IReadOnlyList <T> System.Collections.Generic.IReadOnlyCollection <T> System.Collections.Generic.IEnumerable <T> System.Collections.IEnumerable Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Virtlink.Utilib.Collections Assembly : Virtlink.Utilib.dll Syntax public sealed class ListSlice<T> : IReadOnlyList<T>, IReadOnlyCollection<T>, IEnumerable<T>, IEnumerable Type Parameters Name Description T Constructors | Improve this Doc View Source ListSlice(IReadOnlyList<T>, Int32, Int32) Initializes a new instance of the ListSlice<T> class. Declaration public ListSlice(IReadOnlyList<T> list, int offset, int count) Parameters Type Name Description System.Collections.Generic.IReadOnlyList <T> list The list. System.Int32 offset The offset. System.Int32 count The number of elements. Properties | Improve this Doc View Source Count Gets the number of elements in the list. Declaration public int Count { get; } Property Value Type Description System.Int32 The number of elements. | Improve this Doc View Source Item[Int32] Gets the element at the specified index. Declaration public T this[int index] { get; } Parameters Type Name Description System.Int32 index The zero-based index. Property Value Type Description T The element. Methods | Improve this Doc View Source GetEnumerator() Declaration public IEnumerator<T> GetEnumerator() Returns Type Description System.Collections.Generic.IEnumerator <T> Explicit Interface Implementations | Improve this Doc View Source IEnumerable.GetEnumerator() Declaration IEnumerator IEnumerable.GetEnumerator() Returns Type Description System.Collections.IEnumerator Implements System.Collections.Generic.IReadOnlyList<T> System.Collections.Generic.IReadOnlyCollection<T> System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable Extension Methods Enumerables.AsList<T>(IEnumerable<T>) Enumerables.OrIfEmpty<T>(IEnumerable<T>, IEnumerable<T>) Enumerables.ZipEqual<T1, T2, TResult>(IEnumerable<T1>, IEnumerable<T2>, Func<T1, T2, TResult>) ListSliceExtensions.Take<T>(IReadOnlyList<T>, Int32) ListSliceExtensions.Skip<T>(IReadOnlyList<T>, Int32)"
  },
  "api/Virtlink.Utilib.Collections.ListSet-1.html": {
    "href": "api/Virtlink.Utilib.Collections.ListSet-1.html",
    "title": "Class ListSet<T> | Virtlink Utilib library",
    "keywords": "Class ListSet<T> A set that's especially useful for small sets. Inheritance System.Object ListSet<T> Implements System.Collections.Generic.ISet <T> System.Collections.Generic.ICollection <T> IReadOnlySet <T> System.Collections.Generic.IReadOnlyCollection <T> System.Collections.Generic.IEnumerable <T> System.Collections.IEnumerable Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Virtlink.Utilib.Collections Assembly : Virtlink.Utilib.dll Syntax public sealed class ListSet<T> : ISet<T>, ICollection<T>, IReadOnlySet<T>, IReadOnlyCollection<T>, IEnumerable<T>, IEnumerable Type Parameters Name Description T Constructors | Improve this Doc View Source ListSet() Initializes a new instance of the ListSet<T> class. Declaration public ListSet() | Improve this Doc View Source ListSet(IEnumerable<T>) Initializes a new instance of the ListSet<T> class. Declaration public ListSet(IEnumerable<T> elements) Parameters Type Name Description System.Collections.Generic.IEnumerable <T> elements The initial elements in the set. | Improve this Doc View Source ListSet(IEnumerable<T>, IEqualityComparer<T>) Initializes a new instance of the ListSet<T> class. Declaration public ListSet(IEnumerable<T> elements, IEqualityComparer<T> comparer) Parameters Type Name Description System.Collections.Generic.IEnumerable <T> elements The initial elements in the set. System.Collections.Generic.IEqualityComparer <T> comparer The equality comparer to use; or null to use the default comparer. | Improve this Doc View Source ListSet(IEqualityComparer<T>) Initializes a new instance of the ListSet<T> class. Declaration public ListSet(IEqualityComparer<T> comparer) Parameters Type Name Description System.Collections.Generic.IEqualityComparer <T> comparer The equality comparer to use. Properties | Improve this Doc View Source Comparer Gets the comparer used to compare elements of the set. Declaration public IEqualityComparer<T> Comparer { get; } Property Value Type Description System.Collections.Generic.IEqualityComparer <T> The equality comparer. | Improve this Doc View Source Count Declaration public int Count { get; } Property Value Type Description System.Int32 Methods | Improve this Doc View Source Add(T) Declaration public bool Add(T item) Parameters Type Name Description T item Returns Type Description System.Boolean | Improve this Doc View Source Clear() Declaration public void Clear() | Improve this Doc View Source Contains(T) Declaration public bool Contains(T item) Parameters Type Name Description T item Returns Type Description System.Boolean | Improve this Doc View Source CopyTo(T[], Int32) Declaration public void CopyTo(T[] array, int arrayIndex) Parameters Type Name Description T[] array System.Int32 arrayIndex | Improve this Doc View Source ExceptWith(IEnumerable<T>) Declaration public void ExceptWith(IEnumerable<T> other) Parameters Type Name Description System.Collections.Generic.IEnumerable <T> other | Improve this Doc View Source GetEnumerator() Declaration public IEnumerator<T> GetEnumerator() Returns Type Description System.Collections.Generic.IEnumerator <T> | Improve this Doc View Source IntersectWith(IEnumerable<T>) Declaration public void IntersectWith(IEnumerable<T> other) Parameters Type Name Description System.Collections.Generic.IEnumerable <T> other | Improve this Doc View Source IsProperSubsetOf(IEnumerable<T>) Declaration public bool IsProperSubsetOf(IEnumerable<T> other) Parameters Type Name Description System.Collections.Generic.IEnumerable <T> other Returns Type Description System.Boolean | Improve this Doc View Source IsProperSupersetOf(IEnumerable<T>) Declaration public bool IsProperSupersetOf(IEnumerable<T> other) Parameters Type Name Description System.Collections.Generic.IEnumerable <T> other Returns Type Description System.Boolean | Improve this Doc View Source IsSubsetOf(IEnumerable<T>) Declaration public bool IsSubsetOf(IEnumerable<T> other) Parameters Type Name Description System.Collections.Generic.IEnumerable <T> other Returns Type Description System.Boolean | Improve this Doc View Source IsSupersetOf(IEnumerable<T>) Declaration public bool IsSupersetOf(IEnumerable<T> other) Parameters Type Name Description System.Collections.Generic.IEnumerable <T> other Returns Type Description System.Boolean | Improve this Doc View Source Overlaps(IEnumerable<T>) Declaration public bool Overlaps(IEnumerable<T> other) Parameters Type Name Description System.Collections.Generic.IEnumerable <T> other Returns Type Description System.Boolean | Improve this Doc View Source Remove(T) Declaration public bool Remove(T item) Parameters Type Name Description T item Returns Type Description System.Boolean | Improve this Doc View Source SetEquals(IEnumerable<T>) Declaration public bool SetEquals(IEnumerable<T> other) Parameters Type Name Description System.Collections.Generic.IEnumerable <T> other Returns Type Description System.Boolean | Improve this Doc View Source SymmetricExceptWith(IEnumerable<T>) Declaration public void SymmetricExceptWith(IEnumerable<T> other) Parameters Type Name Description System.Collections.Generic.IEnumerable <T> other | Improve this Doc View Source TryGetValue(T, out T) Declaration public bool TryGetValue(T equalValue, out T actualValue) Parameters Type Name Description T equalValue T actualValue Returns Type Description System.Boolean | Improve this Doc View Source UnionWith(IEnumerable<T>) Declaration public void UnionWith(IEnumerable<T> other) Parameters Type Name Description System.Collections.Generic.IEnumerable <T> other Explicit Interface Implementations | Improve this Doc View Source ICollection<T>.Add(T) Declaration void ICollection<T>.Add(T item) Parameters Type Name Description T item | Improve this Doc View Source ICollection<T>.IsReadOnly Declaration bool ICollection<T>.IsReadOnly { get; } Returns Type Description System.Boolean | Improve this Doc View Source IEnumerable.GetEnumerator() Declaration IEnumerator IEnumerable.GetEnumerator() Returns Type Description System.Collections.IEnumerator Implements System.Collections.Generic.ISet<T> System.Collections.Generic.ICollection<T> IReadOnlySet<T> System.Collections.Generic.IReadOnlyCollection<T> System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable Extension Methods Enumerables.AsList<T>(IEnumerable<T>) Enumerables.OrIfEmpty<T>(IEnumerable<T>, IEnumerable<T>) Enumerables.ZipEqual<T1, T2, TResult>(IEnumerable<T1>, IEnumerable<T2>, Func<T1, T2, TResult>)"
  },
  "api/Virtlink.Utilib.Collections.List.html": {
    "href": "api/Virtlink.Utilib.Collections.List.html",
    "title": "Class List | Virtlink Utilib library",
    "keywords": "Class List Functions for working with lists. Inheritance System.Object List Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Virtlink.Utilib.Collections Assembly : Virtlink.Utilib.dll Syntax public static class List Methods | Improve this Doc View Source Copy<T>(IReadOnlyList<T>, IList<T>, Int32) Copies elements from one list to another. Declaration public static void Copy<T>(IReadOnlyList<T> sourceList, IList<T> destinationList, int count) Parameters Type Name Description System.Collections.Generic.IReadOnlyList <T> sourceList The source list. System.Collections.Generic.IList <T> destinationList The destination list. System.Int32 count The number of elements to copy. Type Parameters Name Description T The type of elements in the lists. | Improve this Doc View Source Copy<T>(IReadOnlyList<T>, Int32, IList<T>, Int32, Int32) Copies elements from one list to another. Declaration public static void Copy<T>(IReadOnlyList<T> sourceList, int sourceIndex, IList<T> destinationList, int destinationIndex, int count) Parameters Type Name Description System.Collections.Generic.IReadOnlyList <T> sourceList The source list. System.Int32 sourceIndex The source index. System.Collections.Generic.IList <T> destinationList The destination list. System.Int32 destinationIndex The destination index. System.Int32 count The number of elements to copy. Type Parameters Name Description T The type of elements in the lists. | Improve this Doc View Source Empty<T>() Returns a read-only empty list. Declaration public static IReadOnlyList<T> Empty<T>() Returns Type Description System.Collections.Generic.IReadOnlyList <T> The read-only empty list. Type Parameters Name Description T The type of elements in the list."
  },
  "api/Virtlink.Utilib.Collections.Graphs.BreadthFirstTraversal-1.html": {
    "href": "api/Virtlink.Utilib.Collections.Graphs.BreadthFirstTraversal-1.html",
    "title": "Class BreadthFirstTraversal<T> | Virtlink Utilib library",
    "keywords": "Class BreadthFirstTraversal<T> Breadth-first traversal. Inheritance System.Object Traversal <T> BreadthFirstTraversal<T> Implements ITraversal <T> Inherited Members Traversal<T>.IsReturned(T, T) Traversal<T>.IsTraversed(T, T) Traversal<T>.GetChildren(T) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Virtlink.Utilib.Collections.Graphs Assembly : Virtlink.Utilib.dll Syntax public abstract class BreadthFirstTraversal<T> : Traversal<T>, ITraversal<T> Type Parameters Name Description T Methods | Improve this Doc View Source Traverse(T) Declaration public override IEnumerable<T> Traverse(T root) Parameters Type Name Description T root Returns Type Description System.Collections.Generic.IEnumerable <T> Overrides Virtlink.Utilib.Collections.Graphs.Traversal<T>.Traverse(T) Implements ITraversal<T>"
  },
  "api/Virtlink.Utilib.Collections.ExtHashSet-1.html": {
    "href": "api/Virtlink.Utilib.Collections.ExtHashSet-1.html",
    "title": "Class ExtHashSet<T> | Virtlink Utilib library",
    "keywords": "Class ExtHashSet<T> An extended hash set. Inheritance System.Object ExtHashSet<T> Implements System.Collections.Generic.ISet <T> System.Collections.Generic.ICollection <T> IReadOnlySet <T> System.Collections.Generic.IReadOnlyCollection <T> System.Collections.Generic.IEnumerable <T> System.Collections.IEnumerable Inherited Members System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Virtlink.Utilib.Collections Assembly : Virtlink.Utilib.dll Syntax public sealed class ExtHashSet<T> : ISet<T>, ICollection<T>, IReadOnlySet<T>, IReadOnlyCollection<T>, IEnumerable<T>, IEnumerable Type Parameters Name Description T The type of elements in the set. Constructors | Improve this Doc View Source ExtHashSet() Initializes a new instance of the ExtHashSet<T> class. Declaration public ExtHashSet() | Improve this Doc View Source ExtHashSet(IEnumerable<T>) Initializes a new instance of the ExtHashSet<T> class. Declaration public ExtHashSet(IEnumerable<T> elements) Parameters Type Name Description System.Collections.Generic.IEnumerable <T> elements The initial elements in the set. | Improve this Doc View Source ExtHashSet(IEnumerable<T>, IEqualityComparer<T>) Initializes a new instance of the ExtHashSet<T> class. Declaration public ExtHashSet(IEnumerable<T> elements, IEqualityComparer<T> comparer) Parameters Type Name Description System.Collections.Generic.IEnumerable <T> elements The initial elements in the set. System.Collections.Generic.IEqualityComparer <T> comparer The equality comparer to use; or null to use the default comparer. | Improve this Doc View Source ExtHashSet(IEqualityComparer<T>) Initializes a new instance of the ExtHashSet<T> class. Declaration public ExtHashSet(IEqualityComparer<T> comparer) Parameters Type Name Description System.Collections.Generic.IEqualityComparer <T> comparer The equality comparer to use. Properties | Improve this Doc View Source Comparer Gets the comparer used to compare elements of the set. Declaration public IEqualityComparer<T> Comparer { get; } Property Value Type Description System.Collections.Generic.IEqualityComparer <T> The equality comparer. | Improve this Doc View Source Count Declaration public int Count { get; } Property Value Type Description System.Int32 Methods | Improve this Doc View Source Add(T) Declaration public bool Add(T item) Parameters Type Name Description T item Returns Type Description System.Boolean | Improve this Doc View Source Clear() Declaration public void Clear() | Improve this Doc View Source Contains(T) Declaration public bool Contains(T item) Parameters Type Name Description T item Returns Type Description System.Boolean | Improve this Doc View Source CopyTo(T[], Int32) Declaration public void CopyTo(T[] array, int arrayIndex) Parameters Type Name Description T[] array System.Int32 arrayIndex | Improve this Doc View Source Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean Overrides System.Object.Equals(System.Object) | Improve this Doc View Source ExceptWith(IEnumerable<T>) Declaration public void ExceptWith(IEnumerable<T> other) Parameters Type Name Description System.Collections.Generic.IEnumerable <T> other | Improve this Doc View Source GetEnumerator() Declaration public IEnumerator<T> GetEnumerator() Returns Type Description System.Collections.Generic.IEnumerator <T> | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides System.Object.GetHashCode() | Improve this Doc View Source IntersectWith(IEnumerable<T>) Declaration public void IntersectWith(IEnumerable<T> other) Parameters Type Name Description System.Collections.Generic.IEnumerable <T> other | Improve this Doc View Source IsProperSubsetOf(IEnumerable<T>) Declaration public bool IsProperSubsetOf(IEnumerable<T> other) Parameters Type Name Description System.Collections.Generic.IEnumerable <T> other Returns Type Description System.Boolean | Improve this Doc View Source IsProperSupersetOf(IEnumerable<T>) Declaration public bool IsProperSupersetOf(IEnumerable<T> other) Parameters Type Name Description System.Collections.Generic.IEnumerable <T> other Returns Type Description System.Boolean | Improve this Doc View Source IsSubsetOf(IEnumerable<T>) Declaration public bool IsSubsetOf(IEnumerable<T> other) Parameters Type Name Description System.Collections.Generic.IEnumerable <T> other Returns Type Description System.Boolean | Improve this Doc View Source IsSupersetOf(IEnumerable<T>) Declaration public bool IsSupersetOf(IEnumerable<T> other) Parameters Type Name Description System.Collections.Generic.IEnumerable <T> other Returns Type Description System.Boolean | Improve this Doc View Source Overlaps(IEnumerable<T>) Declaration public bool Overlaps(IEnumerable<T> other) Parameters Type Name Description System.Collections.Generic.IEnumerable <T> other Returns Type Description System.Boolean | Improve this Doc View Source Remove(T) Declaration public bool Remove(T item) Parameters Type Name Description T item Returns Type Description System.Boolean | Improve this Doc View Source SetEquals(IEnumerable<T>) Declaration public bool SetEquals(IEnumerable<T> other) Parameters Type Name Description System.Collections.Generic.IEnumerable <T> other Returns Type Description System.Boolean | Improve this Doc View Source SymmetricExceptWith(IEnumerable<T>) Declaration public void SymmetricExceptWith(IEnumerable<T> other) Parameters Type Name Description System.Collections.Generic.IEnumerable <T> other | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString() | Improve this Doc View Source TryGetValue(T, out T) Declaration public bool TryGetValue(T equalValue, out T actualValue) Parameters Type Name Description T equalValue T actualValue Returns Type Description System.Boolean | Improve this Doc View Source UnionWith(IEnumerable<T>) Declaration public void UnionWith(IEnumerable<T> other) Parameters Type Name Description System.Collections.Generic.IEnumerable <T> other Explicit Interface Implementations | Improve this Doc View Source ICollection<T>.Add(T) Declaration void ICollection<T>.Add(T item) Parameters Type Name Description T item | Improve this Doc View Source ICollection<T>.IsReadOnly Declaration bool ICollection<T>.IsReadOnly { get; } Returns Type Description System.Boolean | Improve this Doc View Source IEnumerable.GetEnumerator() Declaration IEnumerator IEnumerable.GetEnumerator() Returns Type Description System.Collections.IEnumerator Implements System.Collections.Generic.ISet<T> System.Collections.Generic.ICollection<T> IReadOnlySet<T> System.Collections.Generic.IReadOnlyCollection<T> System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable Extension Methods Enumerables.AsList<T>(IEnumerable<T>) Enumerables.OrIfEmpty<T>(IEnumerable<T>, IEnumerable<T>) Enumerables.ZipEqual<T1, T2, TResult>(IEnumerable<T1>, IEnumerable<T2>, Func<T1, T2, TResult>)"
  },
  "api/Virtlink.Utilib.Collections.Dictionary.html": {
    "href": "api/Virtlink.Utilib.Collections.Dictionary.html",
    "title": "Class Dictionary | Virtlink Utilib library",
    "keywords": "Class Dictionary Functions for working with dictionaries. Inheritance System.Object Dictionary Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Virtlink.Utilib.Collections Assembly : Virtlink.Utilib.dll Syntax public static class Dictionary Methods | Improve this Doc View Source Empty<TKey, TValue>() Returns a read-only empty dictionary. Declaration public static IReadOnlyDictionary<TKey, TValue> Empty<TKey, TValue>() Returns Type Description System.Collections.Generic.IReadOnlyDictionary <TKey, TValue> The read-only empty dictionary. Type Parameters Name Description TKey The type of keys in the dictionary. TValue The type of values in the dictionary."
  },
  "api/Virtlink.Utilib.Chars.html": {
    "href": "api/Virtlink.Utilib.Chars.html",
    "title": "Class Chars | Virtlink Utilib library",
    "keywords": "Class Chars Functions for working with characters. Inheritance System.Object Chars Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Virtlink.Utilib Assembly : Virtlink.Utilib.dll Syntax public static class Chars Methods | Improve this Doc View Source IsHexDigit(Char) Determines whether the character is a hexadecimal digit. Declaration public static bool IsHexDigit(char c) Parameters Type Name Description System.Char c The character to test. Returns Type Description System.Boolean true when the character is a hexadecimal character; otherwise, false ."
  },
  "api/Virtlink.Utilib.Threading.Tasks.TaskExt.html": {
    "href": "api/Virtlink.Utilib.Threading.Tasks.TaskExt.html",
    "title": "Class TaskExt | Virtlink Utilib library",
    "keywords": "Class TaskExt Extension methods for working with tasks. Inheritance System.Object TaskExt Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Virtlink.Utilib.Threading.Tasks Assembly : Virtlink.Utilib.dll Syntax public static class TaskExt Methods | Improve this Doc View Source RunSafe(Action) Runs the specified action in a task while handling exceptions. Declaration public static void RunSafe(Action action) Parameters Type Name Description System.Action action The action to run. | Improve this Doc View Source RunSafe(Action, Action<Exception>) Runs the specified action in a task while handling exceptions. Declaration public static void RunSafe(Action action, Action<Exception> exceptionHandler) Parameters Type Name Description System.Action action The action to run. System.Action < System.Exception > exceptionHandler The exception handler; or null to ignore all exceptions. | Improve this Doc View Source RunSafe(Action, CancellationToken) Runs the specified action in a task while handling exceptions. Declaration public static void RunSafe(Action action, CancellationToken cancellationToken) Parameters Type Name Description System.Action action The action to run. System.Threading.CancellationToken cancellationToken The cancellation token. | Improve this Doc View Source RunSafe(Action, CancellationToken, Action<Exception>) Runs the specified action in a task while handling exceptions. Declaration public static void RunSafe(Action action, CancellationToken cancellationToken, Action<Exception> exceptionHandler) Parameters Type Name Description System.Action action The action to run. System.Threading.CancellationToken cancellationToken The cancellation token. System.Action < System.Exception > exceptionHandler The exception handler; or null to ignore all exceptions. | Improve this Doc View Source RunSafe(Func<Task>) Runs the specified action in a task while handling exceptions. Declaration public static void RunSafe(Func<Task> function) Parameters Type Name Description System.Func < System.Threading.Tasks.Task > function The function to run. | Improve this Doc View Source RunSafe(Func<Task>, Action<Exception>) Runs the specified action in a task while handling exceptions. Declaration public static void RunSafe(Func<Task> function, Action<Exception> exceptionHandler) Parameters Type Name Description System.Func < System.Threading.Tasks.Task > function The function to run. System.Action < System.Exception > exceptionHandler The exception handler; or null to ignore all exceptions. | Improve this Doc View Source RunSafe(Func<Task>, CancellationToken) Runs the specified action in a task while handling exceptions. Declaration public static void RunSafe(Func<Task> function, CancellationToken cancellationToken) Parameters Type Name Description System.Func < System.Threading.Tasks.Task > function The function to run. System.Threading.CancellationToken cancellationToken The cancellation token. | Improve this Doc View Source RunSafe(Func<Task>, CancellationToken, Action<Exception>) Runs the specified function in a task while handling exceptions. Declaration public static void RunSafe(Func<Task> function, CancellationToken cancellationToken, Action<Exception> exceptionHandler) Parameters Type Name Description System.Func < System.Threading.Tasks.Task > function The function to run. System.Threading.CancellationToken cancellationToken The cancellation token. System.Action < System.Exception > exceptionHandler The exception handler; or null to ignore all exceptions."
  },
  "api/Virtlink.Utilib.Threading.ReaderWriterLockSlimExtensions.html": {
    "href": "api/Virtlink.Utilib.Threading.ReaderWriterLockSlimExtensions.html",
    "title": "Class ReaderWriterLockSlimExtensions | Virtlink Utilib library",
    "keywords": "Class ReaderWriterLockSlimExtensions Extension methods for working with System.Threading.ReaderWriterLockSlim objects. Inheritance System.Object ReaderWriterLockSlimExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Virtlink.Utilib.Threading Assembly : Virtlink.Utilib.dll Syntax public static class ReaderWriterLockSlimExtensions Methods | Improve this Doc View Source IsLockHeld(ReaderWriterLockSlim) Determines whether the lock is currently held. Declaration public static bool IsLockHeld(this ReaderWriterLockSlim locker) Parameters Type Name Description System.Threading.ReaderWriterLockSlim locker The locker. Returns Type Description System.Boolean true when a write lock or an (upgradeable) read lock is held; otherwise, false . | Improve this Doc View Source LockedRead<T>(ReaderWriterLockSlim, Func<T>) Executes a function that reads a value from within a read lock. Declaration public static T LockedRead<T>(this ReaderWriterLockSlim locker, Func<T> reader) Parameters Type Name Description System.Threading.ReaderWriterLockSlim locker The locker. System.Func <T> reader The function that reads a value. Returns Type Description T The read value. Type Parameters Name Description T The type of value to read. | Improve this Doc View Source LockedWrite<T>(ReaderWriterLockSlim, Action<T>, T) Executes a function that reads a value from within a read lock. Declaration public static void LockedWrite<T>(this ReaderWriterLockSlim locker, Action<T> writer, T value) Parameters Type Name Description System.Threading.ReaderWriterLockSlim locker The locker. System.Action <T> writer The function that writer a value. T value The value to write. Type Parameters Name Description T The type of value to read. | Improve this Doc View Source Read(ReaderWriterLockSlim) Locks for reading. Declaration public static IDisposable Read(this ReaderWriterLockSlim locker) Parameters Type Name Description System.Threading.ReaderWriterLockSlim locker The locker. Returns Type Description System.IDisposable The lock. Remarks Dispose the returned object to release the lock. | Improve this Doc View Source UpgradeableRead(ReaderWriterLockSlim) Locks for reading upgradeable to writing. Declaration public static IDisposable UpgradeableRead(this ReaderWriterLockSlim locker) Parameters Type Name Description System.Threading.ReaderWriterLockSlim locker The locker. Returns Type Description System.IDisposable The lock. Remarks Dispose the returned object to release the lock. | Improve this Doc View Source Write(ReaderWriterLockSlim) Locks for writing. Declaration public static IDisposable Write(this ReaderWriterLockSlim locker) Parameters Type Name Description System.Threading.ReaderWriterLockSlim locker The locker. Returns Type Description System.IDisposable The lock. Remarks Dispose the returned object to release the lock."
  },
  "api/Virtlink.Utilib.IO.Streams.html": {
    "href": "api/Virtlink.Utilib.IO.Streams.html",
    "title": "Class Streams | Virtlink Utilib library",
    "keywords": "Class Streams Functions for working with streams and readers/writers. Inheritance System.Object Streams Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Virtlink.Utilib.IO Assembly : Virtlink.Utilib.dll Syntax public static class Streams Methods | Improve this Doc View Source AsNonClosingStream(Stream) Wraps the specified stream in a non-closing wrapper. Declaration public static Stream AsNonClosingStream(this Stream stream) Parameters Type Name Description System.IO.Stream stream The stream to wrap. Returns Type Description System.IO.Stream The wrapped stream. | Improve this Doc View Source ReadBinary(Stream) Opens a binary reader for the stream. Declaration public static BinaryReader ReadBinary(this Stream input) Parameters Type Name Description System.IO.Stream input The stream. Returns Type Description System.IO.BinaryReader The binary reader. Remarks Closing the binary reader doesn't close the underlying stream. | Improve this Doc View Source ReadText(Stream) Opens a text reader for the stream. Declaration public static TextReader ReadText(this Stream input) Parameters Type Name Description System.IO.Stream input The stream. Returns Type Description System.IO.TextReader The text reader. Remarks Closing the text reader doesn't close the underlying stream. | Improve this Doc View Source ResetPosition(Stream) Resets the position of the stream and returns the stream. Declaration public static Stream ResetPosition(this Stream stream) Parameters Type Name Description System.IO.Stream stream The stream. Returns Type Description System.IO.Stream The same stream. | Improve this Doc View Source WriteBinary(Stream) Opens a binary writer for the stream. Declaration public static BinaryWriter WriteBinary(this Stream output) Parameters Type Name Description System.IO.Stream output The stream. Returns Type Description System.IO.BinaryWriter The binary writer. Remarks Closing the binary writer doesn't close the underlying stream. | Improve this Doc View Source WriteText(Stream) Opens a text writer for the stream. Declaration public static TextWriter WriteText(this Stream output) Parameters Type Name Description System.IO.Stream output The stream. Returns Type Description System.IO.TextWriter The text writer. Remarks Closing the text writer doesn't close the underlying stream."
  },
  "api/Virtlink.Utilib.IO.MessageDataBuffer.html": {
    "href": "api/Virtlink.Utilib.IO.MessageDataBuffer.html",
    "title": "Class MessageDataBuffer | Virtlink Utilib library",
    "keywords": "Class MessageDataBuffer A data buffer that can recognize the end of a message. Inheritance System.Object MessageDataBuffer Implements IBuffer Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Virtlink.Utilib.IO Assembly : Virtlink.Utilib.dll Syntax public sealed class MessageDataBuffer : IBuffer Constructors | Improve this Doc View Source MessageDataBuffer(IBuffer, Byte[]) Initializes a new instance of the MessageDataBuffer class. Declaration public MessageDataBuffer(IBuffer innerBuffer, byte[] messageBoundary) Parameters Type Name Description IBuffer innerBuffer The inner buffer. System.Byte [] messageBoundary The boundary bytes to look for. Properties | Improve this Doc View Source BufferArray Gets the raw buffer array. Declaration public byte[] BufferArray { get; } Property Value Type Description System.Byte [] The raw array. | Improve this Doc View Source Count Gets the number of valid bytes in the buffer. Declaration public int Count { get; } Property Value Type Description System.Int32 The number of valid bytes. | Improve this Doc View Source Offset Gets the offset of the start of the valid bytes in the buffer. Declaration public int Offset { get; } Property Value Type Description System.Int32 The zero-based offset. Methods | Improve this Doc View Source Advance(Int32) Removes a number of bytes from the start of the buffer. Declaration public void Advance(int count) Parameters Type Name Description System.Int32 count The number of bytes to remove. | Improve this Doc View Source ToArray() Returns a new array with the bytes of this buffer. Declaration public byte[] ToArray() Returns Type Description System.Byte [] A new array with the bytes of this buffer. | Improve this Doc View Source ToArray(Int32) Returns a new array with the specified number of bytes from the start of this buffer. Declaration public byte[] ToArray(int count) Parameters Type Name Description System.Int32 count The number of bytes to return. Returns Type Description System.Byte [] A new array with the specified number of bytes from this buffer. | Improve this Doc View Source ToString() Gets a string from this buffer. Declaration public override string ToString() Returns Type Description System.String A string with the UTF-8 decoded bytes of this buffer. Overrides System.Object.ToString() | Improve this Doc View Source ToString(Encoding) Gets a string from this buffer. Declaration public string ToString(Encoding encoding) Parameters Type Name Description System.Text.Encoding encoding The encoding to use. Returns Type Description System.String A string with the decoded bytes of this buffer. | Improve this Doc View Source ToString(Encoding, Int32) Gets a string from this buffer. Declaration public string ToString(Encoding encoding, int count) Parameters Type Name Description System.Text.Encoding encoding The encoding to use. System.Int32 count The number of bytes to use. Returns Type Description System.String A string with the specified number of decoded bytes from this buffer. | Improve this Doc View Source TryGetNextMessageBoundary() Looks through the buffer and finds the index of the start of the next message boundary. Declaration public int? TryGetNextMessageBoundary() Returns Type Description System.Nullable < System.Int32 > The length of the message, excluding the boundary; or null if not found. | Improve this Doc View Source Write(Byte[], Int32, Int32) Writes to the buffer. Declaration public void Write(byte[] buffer, int offset, int count) Parameters Type Name Description System.Byte [] buffer The buffer to read from. System.Int32 offset The zero-based offset at which to start reading. System.Int32 count The number of bytes to read. Implements IBuffer"
  },
  "api/Virtlink.Utilib.Collections.MultiSetComparer-1.html": {
    "href": "api/Virtlink.Utilib.Collections.MultiSetComparer-1.html",
    "title": "Class MultiSetComparer<T> | Virtlink Utilib library",
    "keywords": "Class MultiSetComparer<T> Compares two multi-sets (unordered collections which may contain duplicates) for equality. Inheritance System.Object MultiSetComparer<T> Implements System.Collections.Generic.IEqualityComparer < System.Collections.Generic.IEnumerable <T>> Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Virtlink.Utilib.Collections Assembly : Virtlink.Utilib.dll Syntax public sealed class MultiSetComparer<T> : IEqualityComparer<IEnumerable<T>> Type Parameters Name Description T The type of elements in the sets. Constructors | Improve this Doc View Source MultiSetComparer() Initializes a new instance of the MultiSetComparer<T> class. Declaration public MultiSetComparer() | Improve this Doc View Source MultiSetComparer(IEqualityComparer<T>) Initializes a new instance of the MultiSetComparer<T> class. Declaration public MultiSetComparer(IEqualityComparer<T> elementComparer) Parameters Type Name Description System.Collections.Generic.IEqualityComparer <T> elementComparer The comparer used to compare elements. Properties | Improve this Doc View Source Default Gets the default instance of the MultiSetComparer<T> . Declaration public static MultiSetComparer<T> Default { get; } Property Value Type Description MultiSetComparer <T> The default instance of the MultiSetComparer<T> class for type T . Methods | Improve this Doc View Source Equals(IEnumerable<T>, IEnumerable<T>) Declaration public bool Equals(IEnumerable<T> x, IEnumerable<T> y) Parameters Type Name Description System.Collections.Generic.IEnumerable <T> x System.Collections.Generic.IEnumerable <T> y Returns Type Description System.Boolean | Improve this Doc View Source GetHashCode(IEnumerable<T>) Declaration public int GetHashCode(IEnumerable<T> enumerable) Parameters Type Name Description System.Collections.Generic.IEnumerable <T> enumerable Returns Type Description System.Int32 Implements System.Collections.Generic.IEqualityComparer<T>"
  },
  "api/Virtlink.Utilib.Collections.ListSliceExtensions.html": {
    "href": "api/Virtlink.Utilib.Collections.ListSliceExtensions.html",
    "title": "Class ListSliceExtensions | Virtlink Utilib library",
    "keywords": "Class ListSliceExtensions Extension methods for the ListSlice<T> class. Inheritance System.Object ListSliceExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Virtlink.Utilib.Collections Assembly : Virtlink.Utilib.dll Syntax public static class ListSliceExtensions Methods | Improve this Doc View Source Skip<T>(IReadOnlyList<T>, Int32) Skips the first elements from the list. Declaration public static IReadOnlyList<T> Skip<T>(this IReadOnlyList<T> list, int count) Parameters Type Name Description System.Collections.Generic.IReadOnlyList <T> list The list. System.Int32 count The number of elements. Returns Type Description System.Collections.Generic.IReadOnlyList <T> The resulting list. Type Parameters Name Description T The type of elements. | Improve this Doc View Source Take<T>(IReadOnlyList<T>, Int32) Takes the first elements from the list. Declaration public static IReadOnlyList<T> Take<T>(this IReadOnlyList<T> list, int count) Parameters Type Name Description System.Collections.Generic.IReadOnlyList <T> list The list. System.Int32 count The number of elements. Returns Type Description System.Collections.Generic.IReadOnlyList <T> The resulting list. Type Parameters Name Description T The type of elements."
  },
  "api/Virtlink.Utilib.Collections.Graphs.PostOrderTraversal-1.html": {
    "href": "api/Virtlink.Utilib.Collections.Graphs.PostOrderTraversal-1.html",
    "title": "Class PostOrderTraversal<T> | Virtlink Utilib library",
    "keywords": "Class PostOrderTraversal<T> Depth-first post-order traversal. Inheritance System.Object Traversal <T> PostOrderTraversal<T> Implements ITraversal <T> Inherited Members Traversal<T>.IsReturned(T, T) Traversal<T>.IsTraversed(T, T) Traversal<T>.GetChildren(T) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Virtlink.Utilib.Collections.Graphs Assembly : Virtlink.Utilib.dll Syntax public abstract class PostOrderTraversal<T> : Traversal<T>, ITraversal<T> Type Parameters Name Description T Methods | Improve this Doc View Source Traverse(T) Declaration public override IEnumerable<T> Traverse(T root) Parameters Type Name Description T root Returns Type Description System.Collections.Generic.IEnumerable <T> Overrides Virtlink.Utilib.Collections.Graphs.Traversal<T>.Traverse(T) Implements ITraversal<T>"
  },
  "api/Virtlink.Utilib.Collections.Graphs.INode-1.html": {
    "href": "api/Virtlink.Utilib.Collections.Graphs.INode-1.html",
    "title": "Interface INode<T> | Virtlink Utilib library",
    "keywords": "Interface INode<T> A node in a graph. Namespace : Virtlink.Utilib.Collections.Graphs Assembly : Virtlink.Utilib.dll Syntax public interface INode<out T> where T : INode<T> Type Parameters Name Description T The type of node. Properties | Improve this Doc View Source Children Gets the children of the node. Declaration IReadOnlyCollection<T> Children { get; } Property Value Type Description System.Collections.Generic.IReadOnlyCollection <T> A collection of child nodes."
  },
  "api/Virtlink.Utilib.BinaryMath.html": {
    "href": "api/Virtlink.Utilib.BinaryMath.html",
    "title": "Class BinaryMath | Virtlink Utilib library",
    "keywords": "Class BinaryMath Binary and bit-wise math operations, and operations that use powers of two. Inheritance System.Object BinaryMath Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Virtlink.Utilib Assembly : Virtlink.Utilib.dll Syntax public static class BinaryMath Methods | Improve this Doc View Source Align(Int32, Int32) Aligns the specified offset to the next boundary. Declaration public static int Align(int offset, int boundary) Parameters Type Name Description System.Int32 offset The offset. System.Int32 boundary The boundary. Returns Type Description System.Int32 The new offset. | Improve this Doc View Source Align(Int64, Int32) Aligns the specified offset to the next boundary. Declaration public static long Align(long offset, int boundary) Parameters Type Name Description System.Int64 offset The offset. System.Int32 boundary The boundary. Returns Type Description System.Int64 The new offset. | Improve this Doc View Source Align(UInt32, Int32) Aligns the specified offset to the next boundary. Declaration public static uint Align(uint offset, int boundary) Parameters Type Name Description System.UInt32 offset The offset. System.Int32 boundary The boundary. Returns Type Description System.UInt32 The new offset. | Improve this Doc View Source Align(UInt64, Int32) Aligns the specified offset to the next boundary. Declaration public static ulong Align(ulong offset, int boundary) Parameters Type Name Description System.UInt64 offset The offset. System.Int32 boundary The boundary. Returns Type Description System.UInt64 The new offset. | Improve this Doc View Source CountSetBits(Byte) Counts the number of bits set in the specified value. Declaration public static int CountSetBits(byte value) Parameters Type Name Description System.Byte value The value whose bits to count. Returns Type Description System.Int32 The number of bits that are set to 1. | Improve this Doc View Source CountSetBits(Int16) Counts the number of bits set in the specified value. Declaration public static int CountSetBits(short value) Parameters Type Name Description System.Int16 value The value whose bits to count. Returns Type Description System.Int32 The number of bits that are set to 1. | Improve this Doc View Source CountSetBits(Int32) Counts the number of bits set in the specified value. Declaration public static int CountSetBits(int value) Parameters Type Name Description System.Int32 value The value whose bits to count. Returns Type Description System.Int32 The number of bits that are set to 1. | Improve this Doc View Source CountSetBits(Int64) Counts the number of bits set in the specified value. Declaration public static int CountSetBits(long value) Parameters Type Name Description System.Int64 value The value whose bits to count. Returns Type Description System.Int32 The number of bits that are set to 1. | Improve this Doc View Source CountSetBits(SByte) Counts the number of bits set in the specified value. Declaration public static int CountSetBits(sbyte value) Parameters Type Name Description System.SByte value The value whose bits to count. Returns Type Description System.Int32 The number of bits that are set to 1. | Improve this Doc View Source CountSetBits(UInt16) Counts the number of bits set in the specified value. Declaration public static int CountSetBits(ushort value) Parameters Type Name Description System.UInt16 value The value whose bits to count. Returns Type Description System.Int32 The number of bits that are set to 1. | Improve this Doc View Source CountSetBits(UInt32) Counts the number of bits set in the specified value. Declaration public static int CountSetBits(uint value) Parameters Type Name Description System.UInt32 value The value whose bits to count. Returns Type Description System.Int32 The number of bits that are set to 1. | Improve this Doc View Source CountSetBits(UInt64) Counts the number of bits set in the specified value. Declaration public static int CountSetBits(ulong value) Parameters Type Name Description System.UInt64 value The value whose bits to count. Returns Type Description System.Int32 The number of bits that are set to 1. | Improve this Doc View Source GetPadding(Int32, Int32) Calculates the padding needed to get the specified offset to a multiple of the specified boundary. Declaration public static int GetPadding(int offset, int boundary) Parameters Type Name Description System.Int32 offset The offset. System.Int32 boundary The boundary. Returns Type Description System.Int32 The number of padding bytes to add. | Improve this Doc View Source GetPadding(Int64, Int32) Calculates the padding needed to get the specified offset to a multiple of the specified boundary. Declaration public static long GetPadding(long offset, int boundary) Parameters Type Name Description System.Int64 offset The offset. System.Int32 boundary The boundary. Returns Type Description System.Int64 The number of padding bytes to add. | Improve this Doc View Source GetPadding(UInt32, Int32) Calculates the padding needed to get the specified offset to a multiple of the specified boundary. Declaration public static uint GetPadding(uint offset, int boundary) Parameters Type Name Description System.UInt32 offset The offset. System.Int32 boundary The boundary. Returns Type Description System.UInt32 The number of padding bytes to add. | Improve this Doc View Source GetPadding(UInt64, Int32) Calculates the padding needed to get the specified offset to a multiple of the specified boundary. Declaration public static ulong GetPadding(ulong offset, int boundary) Parameters Type Name Description System.UInt64 offset The offset. System.Int32 boundary The boundary. Returns Type Description System.UInt64 The number of padding bytes to add. | Improve this Doc View Source IsPowerOfTwo(Int32) Determines whether a value is a positive power of two. Declaration public static bool IsPowerOfTwo(int value) Parameters Type Name Description System.Int32 value The value to test. Returns Type Description System.Boolean true when value is a positive power of two; otherwise, false . | Improve this Doc View Source IsPowerOfTwo(Int64) Determines whether a value is a positive power of two. Declaration public static bool IsPowerOfTwo(long value) Parameters Type Name Description System.Int64 value The value to test. Returns Type Description System.Boolean true when value is a positive power of two; otherwise, false . | Improve this Doc View Source IsPowerOfTwo(UInt32) Determines whether a value is a power of two. Declaration public static bool IsPowerOfTwo(uint value) Parameters Type Name Description System.UInt32 value The value to test. Returns Type Description System.Boolean true when value is a power of two; otherwise, false . | Improve this Doc View Source IsPowerOfTwo(UInt64) Determines whether a value is a power of two. Declaration public static bool IsPowerOfTwo(ulong value) Parameters Type Name Description System.UInt64 value The value to test. Returns Type Description System.Boolean true when value is a power of two; otherwise, false . | Improve this Doc View Source IsPowerOfTwoOrZero(Int32) Determines whether a value is a positive power of two, or zero. Declaration public static bool IsPowerOfTwoOrZero(int value) Parameters Type Name Description System.Int32 value The value to test. Returns Type Description System.Boolean true when value is a positive power of two, or zero; otherwise, false . | Improve this Doc View Source IsPowerOfTwoOrZero(Int64) Determines whether a value is a positive power of two, or zero. Declaration public static bool IsPowerOfTwoOrZero(long value) Parameters Type Name Description System.Int64 value The value to test. Returns Type Description System.Boolean true when value is a positive power of two, or zero; otherwise, false . | Improve this Doc View Source IsPowerOfTwoOrZero(UInt32) Determines whether a value is a power of two, or zero. Declaration public static bool IsPowerOfTwoOrZero(uint value) Parameters Type Name Description System.UInt32 value The value to test. Returns Type Description System.Boolean true when value is a power of two, or zero; otherwise, false . | Improve this Doc View Source IsPowerOfTwoOrZero(UInt64) Determines whether a value is a power of two, or zero. Declaration public static bool IsPowerOfTwoOrZero(ulong value) Parameters Type Name Description System.UInt64 value The value to test. Returns Type Description System.Boolean true when value is a power of two, or zero; otherwise, false . | Improve this Doc View Source RoundToNextPowerOfTwo(Int32) Rounds the specified value to the next power of two. Declaration public static int RoundToNextPowerOfTwo(int value) Parameters Type Name Description System.Int32 value The value to round. Returns Type Description System.Int32 The next power of two. Remarks For positive values, this function returns the next higher power of two. For the value 0, this function returns 1. For negative values, this function returns the next lower power of two. Exceptions Type Condition System.OverflowException value is greater than 0x40000000. | Improve this Doc View Source RoundToNextPowerOfTwo(Int64) Rounds the specified value to the next power of two. Declaration public static long RoundToNextPowerOfTwo(long value) Parameters Type Name Description System.Int64 value The value to round. Returns Type Description System.Int64 The next power of two. Remarks For positive values, this function returns the next higher power of two. For the value 0, this function returns 1. For negative values, this function returns the next lower power of two. Exceptions Type Condition System.OverflowException value is greater than 0x4000000000000000. | Improve this Doc View Source RoundToNextPowerOfTwo(UInt32) Rounds the specified value to the next power of two. Declaration public static uint RoundToNextPowerOfTwo(uint value) Parameters Type Name Description System.UInt32 value The value to round. Returns Type Description System.UInt32 The next power of two. Remarks For positive values, this function returns the next higher power of two. For the value 0, this function returns 1. Exceptions Type Condition System.OverflowException value is greater than 0x40000000. | Improve this Doc View Source RoundToNextPowerOfTwo(UInt64) Rounds the specified value to the next power of two. Declaration public static ulong RoundToNextPowerOfTwo(ulong value) Parameters Type Name Description System.UInt64 value The value to round. Returns Type Description System.UInt64 The next power of two. Remarks For positive values, this function returns the next higher power of two. For the value 0, this function returns 1. For negative values, this function returns the next lower power of two. Exceptions Type Condition System.OverflowException value is greater than 0x4000000000000000. | Improve this Doc View Source RoundToNextPowerOfTwoOrZero(Int32) Rounds the specified value to the next power of two; or returns zero. Declaration public static int RoundToNextPowerOfTwoOrZero(int value) Parameters Type Name Description System.Int32 value The value to round. Returns Type Description System.Int32 The next power of two; or zero. Remarks For positive values, this function returns the next higher power of two. For the value 0, this function returns 0. For negative values, this function returns the next lower power of two. Exceptions Type Condition System.OverflowException value is greater than 0x40000000. | Improve this Doc View Source RoundToNextPowerOfTwoOrZero(Int64) Rounds the specified value to the next power of two; or returns zero. Declaration public static long RoundToNextPowerOfTwoOrZero(long value) Parameters Type Name Description System.Int64 value The value to round. Returns Type Description System.Int64 The next power of two; or zero. Remarks For positive values, this function returns the next higher power of two. For the value 0, this function returns 0. For negative values, this function returns the next lower power of two. Exceptions Type Condition System.OverflowException value is greater than 0x40000000. | Improve this Doc View Source RoundToNextPowerOfTwoOrZero(UInt32) Rounds the specified value to the next power of two; or returns zero. Declaration public static uint RoundToNextPowerOfTwoOrZero(uint value) Parameters Type Name Description System.UInt32 value The value to round. Returns Type Description System.UInt32 The next power of two; or zero. Remarks For positive values, this function returns the next higher power of two. For the value 0, this function returns 0. Exceptions Type Condition System.OverflowException value is greater than 0x80000000. | Improve this Doc View Source RoundToNextPowerOfTwoOrZero(UInt64) Rounds the specified value to the next power of two; or returns zero. Declaration public static ulong RoundToNextPowerOfTwoOrZero(ulong value) Parameters Type Name Description System.UInt64 value The value to round. Returns Type Description System.UInt64 The next power of two; or zero. Remarks For positive values, this function returns the next higher power of two. For the value 0, this function returns 0. For negative values, this function returns the next lower power of two. Exceptions Type Condition System.OverflowException value is greater than 0x80000000. | Improve this Doc View Source SetMostSignificantBit(Int32) Gets an integer with the most significant set bit set to 1 and all other bits set to 0. Declaration public static int SetMostSignificantBit(int value) Parameters Type Name Description System.Int32 value The value to test. Returns Type Description System.Int32 An integer that has the most significant bit set in value set to 1, and the other bits to 0. Remarks The sign of value is ignored. | Improve this Doc View Source SetMostSignificantBit(Int64) Gets an integer with the most significant set bit set to 1 and all other bits set to 0. Declaration public static long SetMostSignificantBit(long value) Parameters Type Name Description System.Int64 value The value to test. Returns Type Description System.Int64 An integer that has the most significant bit set in value set to 1, and the other bits to 0. Remarks The sign of value is ignored. | Improve this Doc View Source SetMostSignificantBit(UInt32) Gets an integer with the most significant set bit set to 1 and all other bits set to 0. Declaration public static uint SetMostSignificantBit(uint value) Parameters Type Name Description System.UInt32 value The value to test. Returns Type Description System.UInt32 An integer that has the most significant bit set in value set to 1, and the other bits to 0. | Improve this Doc View Source SetMostSignificantBit(UInt64) Gets an integer with the most significant set bit set to 1 and all other bits set to 0. Declaration public static ulong SetMostSignificantBit(ulong value) Parameters Type Name Description System.UInt64 value The value to test. Returns Type Description System.UInt64 An integer that has the most significant bit set in value set to 1, and the other bits to 0."
  },
  "index.html": {
    "href": "index.html",
    "title": "Utilib | Virtlink Utilib library",
    "keywords": "Utilib Utilib is a utility library for .NET. It contains all those little utility classes and functions that are missing from the standard .NET libraries. Installation Easiest is to install the NuGet package. PM> Install-Package Virtlink.Utilib Documentation Find the documentation on virtlink.com . License Copyright 2016-2018 - Daniel Pelsmaeker Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 . Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"as is\" basis, without warranties or conditions of any kind , either express or implied. See the License for the specific language governing permissions and limitations under the License."
  },
  "api/Virtlink.Utilib.Text.IStringEncoding.html": {
    "href": "api/Virtlink.Utilib.Text.IStringEncoding.html",
    "title": "Interface IStringEncoding | Virtlink Utilib library",
    "keywords": "Interface IStringEncoding A string encoding. Namespace : Virtlink.Utilib.Text Assembly : Virtlink.Utilib.dll Syntax public interface IStringEncoding Methods | Improve this Doc View Source Decode(String) Decodes the specified string. Declaration string Decode(string encoded) Parameters Type Name Description System.String encoded The encoded string. Returns Type Description System.String The unencoded string. | Improve this Doc View Source Encode(String) Encodes the specified string. Declaration string Encode(string unencoded) Parameters Type Name Description System.String unencoded The unencoded string. Returns Type Description System.String The encoded string."
  },
  "api/Virtlink.Utilib.StringExt.html": {
    "href": "api/Virtlink.Utilib.StringExt.html",
    "title": "Class StringExt | Virtlink Utilib library",
    "keywords": "Class StringExt Extension methods for working with strings. Inheritance System.Object StringExt Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Virtlink.Utilib Assembly : Virtlink.Utilib.dll Syntax public static class StringExt Methods | Improve this Doc View Source CountNewlines(String) Counts the number of newlines in the string. Declaration public static int CountNewlines(this string str) Parameters Type Name Description System.String str The string. Returns Type Description System.Int32 The number of newlines. Remarks This function calls the number of CR+LR, CR, and LF in a string."
  },
  "api/Virtlink.Utilib.Numeric.html": {
    "href": "api/Virtlink.Utilib.Numeric.html",
    "title": "Class Numeric | Virtlink Utilib library",
    "keywords": "Class Numeric Methods for working with numbers. Inheritance System.Object Numeric Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Virtlink.Utilib Assembly : Virtlink.Utilib.dll Syntax public static class Numeric Methods | Improve this Doc View Source Compare(Object, Object) Compares two boxed numbers, regardless of their actual numeric type and signedness. Declaration public static int Compare(object x, object y) Parameters Type Name Description System.Object x The left-hand boxed number to compare. System.Object y The right-hand boxed number to compare. Returns Type Description System.Int32 A negative value if x is less than y , a positive value if x is greater than y , or zero if x is equal to y . | Improve this Doc View Source HasDecimalType(Object) Determines whether the specified object's type is a primitive decimal type. Declaration public static bool HasDecimalType(object obj) Parameters Type Name Description System.Object obj The object whose type to check. Returns Type Description System.Boolean true when the object's type is a decimal type; otherwise, false . | Improve this Doc View Source HasFloatingPointType(Object) Determines whether the specified object's type is a primitive floating-point type. Declaration public static bool HasFloatingPointType(object obj) Parameters Type Name Description System.Object obj The object whose type to check. Returns Type Description System.Boolean true when the object's type is a floating-point type; otherwise, false . | Improve this Doc View Source HasIntegerType(Object) Determines whether the specified object's type is a primitive integer type. Declaration public static bool HasIntegerType(object obj) Parameters Type Name Description System.Object obj The object whose type to check. Returns Type Description System.Boolean true when the object's type is a integer type; otherwise, false . | Improve this Doc View Source HasNumericType(Object) Determines whether the specified object's type is a primitive numeric type. Declaration public static bool HasNumericType(object obj) Parameters Type Name Description System.Object obj The object whose type to check. Returns Type Description System.Boolean true when the object's type is a numeric type; otherwise, false . | Improve this Doc View Source IsDecimalType(Type) Determines whether the specified type is a primitive decimal type. Declaration public static bool IsDecimalType(this Type type) Parameters Type Name Description System.Type type The type to check. Returns Type Description System.Boolean true when the type is a decimal type; otherwise, false . | Improve this Doc View Source IsFloatingPointType(Type) Determines whether the specified type is a primitive floating-point type. Declaration public static bool IsFloatingPointType(this Type type) Parameters Type Name Description System.Type type The type to check. Returns Type Description System.Boolean true when the type is a floating-point type; otherwise, false . | Improve this Doc View Source IsIntegerType(Type) Determines whether the specified type is a primitive integer type. Declaration public static bool IsIntegerType(this Type type) Parameters Type Name Description System.Type type The type to check. Returns Type Description System.Boolean true when the type is a integer type; otherwise, false . | Improve this Doc View Source IsNumericType(Type) Determines whether the specified type is a primitive numeric type. Declaration public static bool IsNumericType(this Type type) Parameters Type Name Description System.Type type The type to check. Returns Type Description System.Boolean true when the type is a numeric type; otherwise, false ."
  },
  "api/Virtlink.Utilib.IO.html": {
    "href": "api/Virtlink.Utilib.IO.html",
    "title": "Namespace Virtlink.Utilib.IO | Virtlink Utilib library",
    "keywords": "Namespace Virtlink.Utilib.IO Classes DataBuffer A data buffer. MessageDataBuffer A data buffer that can recognize the end of a message. Streams Functions for working with streams and readers/writers. TextReaders Extension functions for working with System.IO.TextReader objects. Interfaces IBuffer A data buffer."
  },
  "api/Virtlink.Utilib.IO.TextReaders.html": {
    "href": "api/Virtlink.Utilib.IO.TextReaders.html",
    "title": "Class TextReaders | Virtlink Utilib library",
    "keywords": "Class TextReaders Extension functions for working with System.IO.TextReader objects. Inheritance System.Object TextReaders Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Virtlink.Utilib.IO Assembly : Virtlink.Utilib.dll Syntax public static class TextReaders Methods | Improve this Doc View Source ReadString(TextReader, Int32) Reads a string of the specified length. Declaration public static string ReadString(this TextReader reader, int length) Parameters Type Name Description System.IO.TextReader reader The text reader. System.Int32 length The length, in characters. Returns Type Description System.String The read string."
  },
  "api/Virtlink.Utilib.IO.IBuffer.html": {
    "href": "api/Virtlink.Utilib.IO.IBuffer.html",
    "title": "Interface IBuffer | Virtlink Utilib library",
    "keywords": "Interface IBuffer A data buffer. Namespace : Virtlink.Utilib.IO Assembly : Virtlink.Utilib.dll Syntax public interface IBuffer Properties | Improve this Doc View Source BufferArray Gets the raw buffer array. Declaration byte[] BufferArray { get; } Property Value Type Description System.Byte [] The raw array. | Improve this Doc View Source Count Gets the number of valid bytes in the buffer. Declaration int Count { get; } Property Value Type Description System.Int32 The number of valid bytes. | Improve this Doc View Source Offset Gets the offset of the start of the valid bytes in the buffer. Declaration int Offset { get; } Property Value Type Description System.Int32 The zero-based offset. Methods | Improve this Doc View Source Advance(Int32) Removes a number of bytes from the start of the buffer. Declaration void Advance(int count) Parameters Type Name Description System.Int32 count The number of bytes to remove. | Improve this Doc View Source ToArray() Returns a new array with the bytes of this buffer. Declaration byte[] ToArray() Returns Type Description System.Byte [] A new array with the bytes of this buffer. | Improve this Doc View Source ToArray(Int32) Returns a new array with the specified number of bytes from the start of this buffer. Declaration byte[] ToArray(int count) Parameters Type Name Description System.Int32 count The number of bytes to return. Returns Type Description System.Byte [] A new array with the specified number of bytes from this buffer. | Improve this Doc View Source ToString() Gets a string from this buffer. Declaration string ToString() Returns Type Description System.String A string with the UTF-8 decoded bytes of this buffer. | Improve this Doc View Source ToString(Encoding) Gets a string from this buffer. Declaration string ToString(Encoding encoding) Parameters Type Name Description System.Text.Encoding encoding The encoding to use. Returns Type Description System.String A string with the decoded bytes of this buffer. | Improve this Doc View Source ToString(Encoding, Int32) Gets a string from this buffer. Declaration string ToString(Encoding encoding, int count) Parameters Type Name Description System.Text.Encoding encoding The encoding to use. System.Int32 count The number of bytes to use. Returns Type Description System.String A string with the specified number of decoded bytes from this buffer. | Improve this Doc View Source Write(Byte[], Int32, Int32) Writes to the buffer. Declaration void Write(byte[] buffer, int offset, int count) Parameters Type Name Description System.Byte [] buffer The buffer to read from. System.Int32 offset The zero-based offset at which to start reading. System.Int32 count The number of bytes to read."
  },
  "api/Virtlink.Utilib.IO.DataBuffer.html": {
    "href": "api/Virtlink.Utilib.IO.DataBuffer.html",
    "title": "Class DataBuffer | Virtlink Utilib library",
    "keywords": "Class DataBuffer A data buffer. Inheritance System.Object DataBuffer Implements IBuffer Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Virtlink.Utilib.IO Assembly : Virtlink.Utilib.dll Syntax public sealed class DataBuffer : IBuffer Constructors | Improve this Doc View Source DataBuffer() Initializes a new instance of the DataBuffer class. Declaration public DataBuffer() | Improve this Doc View Source DataBuffer(Int32) Initializes a new instance of the DataBuffer class. Declaration public DataBuffer(int capacity) Parameters Type Name Description System.Int32 capacity The initial minimum capacity of the buffer. Properties | Improve this Doc View Source BufferArray Gets the raw buffer array. Declaration public byte[] BufferArray { get; } Property Value Type Description System.Byte [] The raw array. | Improve this Doc View Source Count Gets the number of valid bytes in the buffer. Declaration public int Count { get; } Property Value Type Description System.Int32 The number of valid bytes. | Improve this Doc View Source Offset Gets the offset of the start of the valid bytes in the buffer. Declaration public int Offset { get; } Property Value Type Description System.Int32 The zero-based offset. Methods | Improve this Doc View Source Advance(Int32) Removes a number of bytes from the start of the buffer. Declaration public void Advance(int count) Parameters Type Name Description System.Int32 count The number of bytes to remove. | Improve this Doc View Source ToArray() Returns a new array with the bytes of this buffer. Declaration public byte[] ToArray() Returns Type Description System.Byte [] A new array with the bytes of this buffer. | Improve this Doc View Source ToArray(Int32) Returns a new array with the specified number of bytes from the start of this buffer. Declaration public byte[] ToArray(int count) Parameters Type Name Description System.Int32 count The number of bytes to return. Returns Type Description System.Byte [] A new array with the specified number of bytes from this buffer. | Improve this Doc View Source ToString() Gets a string from this buffer. Declaration public override string ToString() Returns Type Description System.String A string with the UTF-8 decoded bytes of this buffer. Overrides System.Object.ToString() | Improve this Doc View Source ToString(Encoding) Gets a string from this buffer. Declaration public string ToString(Encoding encoding) Parameters Type Name Description System.Text.Encoding encoding The encoding to use. Returns Type Description System.String A string with the decoded bytes of this buffer. | Improve this Doc View Source ToString(Encoding, Int32) Gets a string from this buffer. Declaration public string ToString(Encoding encoding, int count) Parameters Type Name Description System.Text.Encoding encoding The encoding to use. System.Int32 count The number of bytes to use. Returns Type Description System.String A string with the specified number of decoded bytes from this buffer. | Improve this Doc View Source Write(Byte[], Int32, Int32) Writes to the buffer. Declaration public void Write(byte[] buffer, int offset, int count) Parameters Type Name Description System.Byte [] buffer The buffer to read from. System.Int32 offset The zero-based offset at which to start reading. System.Int32 count The number of bytes to read. Implements IBuffer"
  },
  "api/Virtlink.Utilib.IntegerMath.html": {
    "href": "api/Virtlink.Utilib.IntegerMath.html",
    "title": "Class IntegerMath | Virtlink Utilib library",
    "keywords": "Class IntegerMath Math operations on integers. Inheritance System.Object IntegerMath Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Virtlink.Utilib Assembly : Virtlink.Utilib.dll Syntax public static class IntegerMath Methods | Improve this Doc View Source Clamp(Int32, Int32, Int32) Clamps an integer value between two bounds. Declaration public static int Clamp(int value, int lowerBound, int upperBound) Parameters Type Name Description System.Int32 value The value to clamp. System.Int32 lowerBound The inclusive lower bound. System.Int32 upperBound The inclusive upper bound. Returns Type Description System.Int32 The clamped value. | Improve this Doc View Source Clamp(Int64, Int64, Int64) Clamps an integer value between two bounds. Declaration public static long Clamp(long value, long lowerBound, long upperBound) Parameters Type Name Description System.Int64 value The value to clamp. System.Int64 lowerBound The inclusive lower bound. System.Int64 upperBound The inclusive upper bound. Returns Type Description System.Int64 The clamped value. | Improve this Doc View Source Clamp(UInt32, UInt32, UInt32) Clamps an integer value between two bounds. Declaration public static uint Clamp(uint value, uint lowerBound, uint upperBound) Parameters Type Name Description System.UInt32 value The value to clamp. System.UInt32 lowerBound The inclusive lower bound. System.UInt32 upperBound The inclusive upper bound. Returns Type Description System.UInt32 The clamped value. | Improve this Doc View Source Clamp(UInt64, UInt64, UInt64) Clamps an integer value between two bounds. Declaration public static ulong Clamp(ulong value, ulong lowerBound, ulong upperBound) Parameters Type Name Description System.UInt64 value The value to clamp. System.UInt64 lowerBound The inclusive lower bound. System.UInt64 upperBound The inclusive upper bound. Returns Type Description System.UInt64 The clamped value. | Improve this Doc View Source Modulo(Int32, Int32) Calculates the dividend modulo the divisor. Declaration public static int Modulo(int dividend, int divisor) Parameters Type Name Description System.Int32 dividend The dividend. System.Int32 divisor The divisor. Returns Type Description System.Int32 The result of dividend modulo divisor . Remarks When dividend is positive, this method performs the same operation as dividend % divisor . However, when dividend is negative, this method returns the modulo instead of the remainder. The result will therefore always be positive. The sign of the divisor is ignored. Exceptions Type Condition System.DivideByZeroException The divisor cannot be zero. | Improve this Doc View Source Modulo(Int64, Int64) Calculates the dividend modulo the divisor. Declaration public static long Modulo(long dividend, long divisor) Parameters Type Name Description System.Int64 dividend The dividend. System.Int64 divisor The divisor. Returns Type Description System.Int64 The result of dividend modulo divisor . Remarks When dividend is positive, this method performs the same operation as dividend % divisor . However, when dividend is negative, this method returns the modulo instead of the remainder. The result will therefore always be positive. The sign of the divisor is ignored. Exceptions Type Condition System.DivideByZeroException The divisor cannot be zero."
  },
  "api/Virtlink.Utilib.EnumArgumentException.html": {
    "href": "api/Virtlink.Utilib.EnumArgumentException.html",
    "title": "Class EnumArgumentException | Virtlink Utilib library",
    "keywords": "Class EnumArgumentException Exception thrown when using an invalid enum value. Inheritance System.Object System.Exception System.SystemException System.ArgumentException EnumArgumentException Implements System.Runtime.Serialization.ISerializable Inherited Members System.ArgumentException.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) System.ArgumentException.Message System.ArgumentException.ParamName System.Exception.GetBaseException() System.Exception.GetType() System.Exception.ToString() System.Exception.Data System.Exception.HelpLink System.Exception.HResult System.Exception.InnerException System.Exception.Source System.Exception.StackTrace System.Exception.TargetSite System.Exception.SerializeObjectState System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Virtlink.Utilib Assembly : Virtlink.Utilib.dll Syntax public sealed class EnumArgumentException : ArgumentException, ISerializable Constructors | Improve this Doc View Source EnumArgumentException() Initializes a new instance of the EnumArgumentException class. Declaration public EnumArgumentException() | Improve this Doc View Source EnumArgumentException(String) Initializes a new instance of the EnumArgumentException class. Declaration public EnumArgumentException(string message) Parameters Type Name Description System.String message The exception message; or null to use the default message. | Improve this Doc View Source EnumArgumentException(String, Exception) Initializes a new instance of the EnumArgumentException class. Declaration public EnumArgumentException(string message, Exception innerException) Parameters Type Name Description System.String message The exception message; or null to use the default message. System.Exception innerException The exception that caused this exception; or null . | Improve this Doc View Source EnumArgumentException(String, Int32, Type) Initializes a new instance of the EnumArgumentException class. Declaration public EnumArgumentException(string paramName, int invalidValue, Type enumType) Parameters Type Name Description System.String paramName The parameter name. System.Int32 invalidValue The invalid enum value. System.Type enumType The enum type. Implements System.Runtime.Serialization.ISerializable"
  },
  "api/Virtlink.Utilib.Collections.html": {
    "href": "api/Virtlink.Utilib.Collections.html",
    "title": "Namespace Virtlink.Utilib.Collections | Virtlink Utilib library",
    "keywords": "Namespace Virtlink.Utilib.Collections Classes Collection Functions for working with collections. Dictionary Functions for working with dictionaries. Enumerables Functions for working with enumerables. ExtHashSet<T> An extended hash set. List Functions for working with lists. ListComparer<T> Compares two lists (ordered collections which may contain duplicates) for equality. ListSet<T> A set that's especially useful for small sets. ListSlice<T> A slice of a read-only list. ListSliceExtensions Extension methods for the ListSlice<T> class. MultiSetComparer<T> Compares two multi-sets (unordered collections which may contain duplicates) for equality. Queues Functions for working with queues. SetComparer<T> Compares two sets (unordered collections without duplicates) for equality. Stacks Functions for working with stacks. Interfaces IReadOnlySet<T> A read-only set."
  },
  "api/Virtlink.Utilib.Collections.Stacks.html": {
    "href": "api/Virtlink.Utilib.Collections.Stacks.html",
    "title": "Class Stacks | Virtlink Utilib library",
    "keywords": "Class Stacks Functions for working with stacks. Inheritance System.Object Stacks Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Virtlink.Utilib.Collections Assembly : Virtlink.Utilib.dll Syntax public static class Stacks Methods | Improve this Doc View Source PeekOrDefault<T>(Stack<T>) Returns the top element of the stack without removing it; or returns the default value when the stack is empty. Declaration public static T PeekOrDefault<T>(this Stack<T> stack) Parameters Type Name Description System.Collections.Generic.Stack <T> stack The stack. Returns Type Description T The top element of the stack; or the default value of T . Type Parameters Name Description T The type of elements. | Improve this Doc View Source PushRange<T>(Stack<T>, IEnumerable<T>) Pushes a range of elements onto the stack. Declaration public static void PushRange<T>(this Stack<T> stack, IEnumerable<T> elements) Parameters Type Name Description System.Collections.Generic.Stack <T> stack The stack. System.Collections.Generic.IEnumerable <T> elements The elements to push. Type Parameters Name Description T The type of elements. Remarks The first element is pushed first."
  },
  "api/Virtlink.Utilib.Collections.SetComparer-1.html": {
    "href": "api/Virtlink.Utilib.Collections.SetComparer-1.html",
    "title": "Class SetComparer<T> | Virtlink Utilib library",
    "keywords": "Class SetComparer<T> Compares two sets (unordered collections without duplicates) for equality. Inheritance System.Object SetComparer<T> Implements System.Collections.Generic.IEqualityComparer < System.Collections.Generic.IEnumerable <T>> Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Virtlink.Utilib.Collections Assembly : Virtlink.Utilib.dll Syntax public sealed class SetComparer<T> : IEqualityComparer<IEnumerable<T>> Type Parameters Name Description T The type of elements in the sets. Constructors | Improve this Doc View Source SetComparer() Initializes a new instance of the SetComparer<T> class. Declaration public SetComparer() | Improve this Doc View Source SetComparer(IEqualityComparer<T>) Initializes a new instance of the SetComparer<T> class. Declaration public SetComparer(IEqualityComparer<T> elementComparer) Parameters Type Name Description System.Collections.Generic.IEqualityComparer <T> elementComparer The comparer used to compare elements. Properties | Improve this Doc View Source Default Gets the default instance of the SetComparer<T> . Declaration public static SetComparer<T> Default { get; } Property Value Type Description SetComparer <T> The default instance of the SetComparer<T> class for type T . Methods | Improve this Doc View Source Equals(IEnumerable<T>, IEnumerable<T>) Declaration public bool Equals(IEnumerable<T> x, IEnumerable<T> y) Parameters Type Name Description System.Collections.Generic.IEnumerable <T> x System.Collections.Generic.IEnumerable <T> y Returns Type Description System.Boolean | Improve this Doc View Source GetHashCode(IEnumerable<T>) Declaration public int GetHashCode(IEnumerable<T> enumerable) Parameters Type Name Description System.Collections.Generic.IEnumerable <T> enumerable Returns Type Description System.Int32 Implements System.Collections.Generic.IEqualityComparer<T>"
  },
  "api/Virtlink.Utilib.Collections.IReadOnlySet-1.html": {
    "href": "api/Virtlink.Utilib.Collections.IReadOnlySet-1.html",
    "title": "Interface IReadOnlySet<T> | Virtlink Utilib library",
    "keywords": "Interface IReadOnlySet<T> A read-only set. Inherited Members System.Collections.Generic.IReadOnlyCollection<T>.Count System.Collections.Generic.IEnumerable<T>.GetEnumerator() Namespace : Virtlink.Utilib.Collections Assembly : Virtlink.Utilib.dll Syntax public interface IReadOnlySet<T> : IReadOnlyCollection<T>, IEnumerable<T>, IEnumerable Type Parameters Name Description T The type of elements in the set. Methods | Improve this Doc View Source Contains(T) Determines whether the specified item is contained in the set. Declaration bool Contains(T item) Parameters Type Name Description T item The item to look for. Returns Type Description System.Boolean true when the item is in the set; otherwise, false . | Improve this Doc View Source IsProperSubsetOf(IEnumerable<T>) Determines whether the specified collection is a proper subset of this set. Declaration bool IsProperSubsetOf(IEnumerable<T> other) Parameters Type Name Description System.Collections.Generic.IEnumerable <T> other The collection. Returns Type Description System.Boolean true when the specified collection is a proper subset of this set; otherwise, false . | Improve this Doc View Source IsProperSupersetOf(IEnumerable<T>) Determines whether the specified collection is a proper superset of this set. Declaration bool IsProperSupersetOf(IEnumerable<T> other) Parameters Type Name Description System.Collections.Generic.IEnumerable <T> other The collection. Returns Type Description System.Boolean true when the specified collection is a proper superset of this set; otherwise, false . | Improve this Doc View Source IsSubsetOf(IEnumerable<T>) Determines whether the specified collection is a subset of this set. Declaration bool IsSubsetOf(IEnumerable<T> other) Parameters Type Name Description System.Collections.Generic.IEnumerable <T> other The collection. Returns Type Description System.Boolean true when the specified collection is a subset of this set; otherwise, false . | Improve this Doc View Source IsSupersetOf(IEnumerable<T>) Determines whether the specified collection is a superset of this set. Declaration bool IsSupersetOf(IEnumerable<T> other) Parameters Type Name Description System.Collections.Generic.IEnumerable <T> other The collection. Returns Type Description System.Boolean true when the specified collection is a superset of this set; otherwise, false . | Improve this Doc View Source Overlaps(IEnumerable<T>) Determines whether the specified collection overlaps this set. Declaration bool Overlaps(IEnumerable<T> other) Parameters Type Name Description System.Collections.Generic.IEnumerable <T> other The collection. Returns Type Description System.Boolean true when the specified collection overlaps this set; otherwise, false . | Improve this Doc View Source SetEquals(IEnumerable<T>) Determines whether this set and the specified collection are equal. Declaration bool SetEquals(IEnumerable<T> other) Parameters Type Name Description System.Collections.Generic.IEnumerable <T> other The collection. Returns Type Description System.Boolean true when the specified collection is equal to this set; otherwise, false . | Improve this Doc View Source TryGetValue(T, out T) Determines whether the set contains a specified value. Declaration bool TryGetValue(T equalValue, out T actualValue) Parameters Type Name Description T equalValue The value to search for. T actualValue The matching value from the set, if found; otherwise, equalValue if there are no matches. Returns Type Description System.Boolean true if a matching value was found; otherwise, false . Extension Methods Enumerables.AsList<T>(IEnumerable<T>) Enumerables.OrIfEmpty<T>(IEnumerable<T>, IEnumerable<T>) Enumerables.ZipEqual<T1, T2, TResult>(IEnumerable<T1>, IEnumerable<T2>, Func<T1, T2, TResult>)"
  },
  "api/Virtlink.Utilib.Collections.Graphs.html": {
    "href": "api/Virtlink.Utilib.Collections.Graphs.html",
    "title": "Namespace Virtlink.Utilib.Collections.Graphs | Virtlink Utilib library",
    "keywords": "Namespace Virtlink.Utilib.Collections.Graphs Classes BreadthFirstTraversal Breadth-first traversal. BreadthFirstTraversal<T> Breadth-first traversal. DepthFirstTraversal Depth-first pre-order traversal. DepthFirstTraversal<T> Depth-first pre-order traversal. PostOrderTraversal Depth-first traversal. PostOrderTraversal<T> Depth-first post-order traversal. TopologicalTraversal Topological traversal. TopologicalTraversal<T> Topological traversal. Traversal<T> Base class for traversal algorithms. Interfaces INode<T> A node in a graph. ITraversal<T> A graph traversal algorithm."
  },
  "api/Virtlink.Utilib.Collections.Graphs.Traversal-1.html": {
    "href": "api/Virtlink.Utilib.Collections.Graphs.Traversal-1.html",
    "title": "Class Traversal<T> | Virtlink Utilib library",
    "keywords": "Class Traversal<T> Base class for traversal algorithms. Inheritance System.Object Traversal<T> BreadthFirstTraversal<T> DepthFirstTraversal<T> PostOrderTraversal<T> TopologicalTraversal<T> Implements ITraversal <T> Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Virtlink.Utilib.Collections.Graphs Assembly : Virtlink.Utilib.dll Syntax public abstract class Traversal<T> : ITraversal<T> Type Parameters Name Description T Methods | Improve this Doc View Source GetChildren(T) Returns the children of the specified node. Declaration protected abstract IEnumerable<T> GetChildren(T node) Parameters Type Name Description T node The node. Returns Type Description System.Collections.Generic.IEnumerable <T> | Improve this Doc View Source IsReturned(T, T) Returns whether to return the specified node. Declaration protected virtual bool IsReturned(T node, T root) Parameters Type Name Description T node The node. T root The root node at which the traversal started. Returns Type Description System.Boolean true to return the specified node; otherwise, false . | Improve this Doc View Source IsTraversed(T, T) Returns whether to traverse the children of the specified node. Declaration protected virtual bool IsTraversed(T node, T root) Parameters Type Name Description T node The node. T root The root node at which the traversal started. Returns Type Description System.Boolean true to traverse the children of the node; otherwise, false . | Improve this Doc View Source Traverse(T) Declaration public abstract IEnumerable<T> Traverse(T root) Parameters Type Name Description T root Returns Type Description System.Collections.Generic.IEnumerable <T> Implements ITraversal<T>"
  },
  "api/Virtlink.Utilib.Collections.Graphs.TopologicalTraversal-1.html": {
    "href": "api/Virtlink.Utilib.Collections.Graphs.TopologicalTraversal-1.html",
    "title": "Class TopologicalTraversal<T> | Virtlink Utilib library",
    "keywords": "Class TopologicalTraversal<T> Topological traversal. Inheritance System.Object Traversal <T> TopologicalTraversal<T> Implements ITraversal <T> Inherited Members Traversal<T>.IsReturned(T, T) Traversal<T>.IsTraversed(T, T) Traversal<T>.GetChildren(T) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Virtlink.Utilib.Collections.Graphs Assembly : Virtlink.Utilib.dll Syntax public abstract class TopologicalTraversal<T> : Traversal<T>, ITraversal<T> Type Parameters Name Description T Methods | Improve this Doc View Source Traverse(T) Declaration public override IEnumerable<T> Traverse(T root) Parameters Type Name Description T root Returns Type Description System.Collections.Generic.IEnumerable <T> Overrides Virtlink.Utilib.Collections.Graphs.Traversal<T>.Traverse(T) Implements ITraversal<T>"
  },
  "api/Virtlink.Utilib.Collections.Graphs.PostOrderTraversal.html": {
    "href": "api/Virtlink.Utilib.Collections.Graphs.PostOrderTraversal.html",
    "title": "Class PostOrderTraversal | Virtlink Utilib library",
    "keywords": "Class PostOrderTraversal Depth-first traversal. Inheritance System.Object PostOrderTraversal Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Virtlink.Utilib.Collections.Graphs Assembly : Virtlink.Utilib.dll Syntax public static class PostOrderTraversal Methods | Improve this Doc View Source Traverse<T>(T) Traverses a tree whose nodes implement the INode<T> interface. Declaration public static IEnumerable<T> Traverse<T>(T root)where T : INode<T> Parameters Type Name Description T root The root of the tree. Returns Type Description System.Collections.Generic.IEnumerable <T> An enumerable that returns the tree's nodes in depth-first pre-order. Type Parameters Name Description T The type of nodes. | Improve this Doc View Source Traverse<T>(T, Func<T, IReadOnlyCollection<T>>) Traverses a tree where the children of a node are returned by a lambda function. Declaration public static IEnumerable<T> Traverse<T>(T root, Func<T, IReadOnlyCollection<T>> childrenGetter) Parameters Type Name Description T root The root of the tree. System.Func <T, System.Collections.Generic.IReadOnlyCollection <T>> childrenGetter Function that returns the children of the node. Returns Type Description System.Collections.Generic.IEnumerable <T> An enumerable that returns the tree's nodes in depth-first pre-order. Type Parameters Name Description T The type of nodes."
  },
  "api/Virtlink.Utilib.Collections.Graphs.ITraversal-1.html": {
    "href": "api/Virtlink.Utilib.Collections.Graphs.ITraversal-1.html",
    "title": "Interface ITraversal<T> | Virtlink Utilib library",
    "keywords": "Interface ITraversal<T> A graph traversal algorithm. Namespace : Virtlink.Utilib.Collections.Graphs Assembly : Virtlink.Utilib.dll Syntax public interface ITraversal<T> Type Parameters Name Description T Methods | Improve this Doc View Source Traverse(T) Traverses the graph, starting at the specified root. Declaration IEnumerable<T> Traverse(T root) Parameters Type Name Description T root The root at which to start the traversal. Returns Type Description System.Collections.Generic.IEnumerable <T> An enumerable sequence of nodes."
  },
  "api/Virtlink.Utilib.Collections.Graphs.DepthFirstTraversal.html": {
    "href": "api/Virtlink.Utilib.Collections.Graphs.DepthFirstTraversal.html",
    "title": "Class DepthFirstTraversal | Virtlink Utilib library",
    "keywords": "Class DepthFirstTraversal Depth-first pre-order traversal. Inheritance System.Object DepthFirstTraversal Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Virtlink.Utilib.Collections.Graphs Assembly : Virtlink.Utilib.dll Syntax public static class DepthFirstTraversal Methods | Improve this Doc View Source Traverse<T>(T) Traverses a tree whose nodes implement the INode<T> interface. Declaration public static IEnumerable<T> Traverse<T>(T root)where T : INode<T> Parameters Type Name Description T root The root of the tree. Returns Type Description System.Collections.Generic.IEnumerable <T> An enumerable that returns the tree's nodes in depth-first pre-order. Type Parameters Name Description T The type of nodes. | Improve this Doc View Source Traverse<T>(T, Func<T, IReadOnlyCollection<T>>) Traverses a tree where the children of a node are returned by a lambda function. Declaration public static IEnumerable<T> Traverse<T>(T root, Func<T, IReadOnlyCollection<T>> childrenGetter) Parameters Type Name Description T root The root of the tree. System.Func <T, System.Collections.Generic.IReadOnlyCollection <T>> childrenGetter Function that returns the children of the node. Returns Type Description System.Collections.Generic.IEnumerable <T> An enumerable that returns the tree's nodes in depth-first pre-order. Type Parameters Name Description T The type of nodes."
  },
  "api/Virtlink.Utilib.Collections.Graphs.DepthFirstTraversal-1.html": {
    "href": "api/Virtlink.Utilib.Collections.Graphs.DepthFirstTraversal-1.html",
    "title": "Class DepthFirstTraversal<T> | Virtlink Utilib library",
    "keywords": "Class DepthFirstTraversal<T> Depth-first pre-order traversal. Inheritance System.Object Traversal <T> DepthFirstTraversal<T> Implements ITraversal <T> Inherited Members Traversal<T>.IsReturned(T, T) Traversal<T>.IsTraversed(T, T) Traversal<T>.GetChildren(T) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Virtlink.Utilib.Collections.Graphs Assembly : Virtlink.Utilib.dll Syntax public abstract class DepthFirstTraversal<T> : Traversal<T>, ITraversal<T> Type Parameters Name Description T Methods | Improve this Doc View Source Traverse(T) Declaration public override IEnumerable<T> Traverse(T root) Parameters Type Name Description T root Returns Type Description System.Collections.Generic.IEnumerable <T> Overrides Virtlink.Utilib.Collections.Graphs.Traversal<T>.Traverse(T) Implements ITraversal<T>"
  },
  "api/Virtlink.Utilib.Text.CodePointSet.html": {
    "href": "api/Virtlink.Utilib.Text.CodePointSet.html",
    "title": "Class CodePointSet | Virtlink Utilib library",
    "keywords": "Class CodePointSet A set of code points. Inheritance System.Object CodePointSet Implements System.Collections.Generic.ISet < CodePoint > System.Collections.Generic.ICollection < CodePoint > IReadOnlySet < CodePoint > System.Collections.Generic.IReadOnlyCollection < CodePoint > System.Collections.Generic.IEnumerable < CodePoint > System.Collections.IEnumerable Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Virtlink.Utilib.Text Assembly : Virtlink.Utilib.dll Syntax public sealed class CodePointSet : ISet<CodePoint>, ICollection<CodePoint>, IReadOnlySet<CodePoint>, IReadOnlyCollection<CodePoint>, IEnumerable<CodePoint>, IEnumerable Remarks This class is not thread-safe. Constructors | Improve this Doc View Source CodePointSet() Initializes a new instance of the CodePointSet class. Declaration public CodePointSet() | Improve this Doc View Source CodePointSet(IEnumerable<CodePoint>) Initializes a new instance of the CodePointSet class. Declaration public CodePointSet(IEnumerable<CodePoint> characters) Parameters Type Name Description System.Collections.Generic.IEnumerable < CodePoint > characters The characters to include in the set. Properties | Improve this Doc View Source Count Declaration public int Count { get; } Property Value Type Description System.Int32 Methods | Improve this Doc View Source Add(CodePoint) Declaration public bool Add(CodePoint item) Parameters Type Name Description CodePoint item Returns Type Description System.Boolean | Improve this Doc View Source AddRange(CodePoint, CodePoint) Adds a range of elements to this code point set. Declaration public void AddRange(CodePoint from, CodePoint until) Parameters Type Name Description CodePoint from The inclusive start of the range. CodePoint until The exclusive end of the range. | Improve this Doc View Source Clear() Declaration public void Clear() | Improve this Doc View Source Contains(CodePoint) Declaration public bool Contains(CodePoint c) Parameters Type Name Description CodePoint c Returns Type Description System.Boolean | Improve this Doc View Source CopyTo(CodePoint[], Int32) Declaration public void CopyTo(CodePoint[] array, int arrayIndex) Parameters Type Name Description CodePoint [] array System.Int32 arrayIndex | Improve this Doc View Source ExceptWith(IEnumerable<CodePoint>) Declaration public void ExceptWith(IEnumerable<CodePoint> other) Parameters Type Name Description System.Collections.Generic.IEnumerable < CodePoint > other | Improve this Doc View Source ExceptWith(CodePointSet) Declaration public void ExceptWith(CodePointSet other) Parameters Type Name Description CodePointSet other | Improve this Doc View Source GetEnumerator() Declaration public IEnumerator<CodePoint> GetEnumerator() Returns Type Description System.Collections.Generic.IEnumerator < CodePoint > | Improve this Doc View Source IntersectWith(IEnumerable<CodePoint>) Declaration public void IntersectWith(IEnumerable<CodePoint> other) Parameters Type Name Description System.Collections.Generic.IEnumerable < CodePoint > other | Improve this Doc View Source IntersectWith(CodePointSet) Declaration public void IntersectWith(CodePointSet other) Parameters Type Name Description CodePointSet other | Improve this Doc View Source IsProperSubsetOf(IEnumerable<CodePoint>) Declaration public bool IsProperSubsetOf(IEnumerable<CodePoint> other) Parameters Type Name Description System.Collections.Generic.IEnumerable < CodePoint > other Returns Type Description System.Boolean | Improve this Doc View Source IsProperSubsetOf(CodePointSet) Determines whether the current code point set is a proper subset of a specified collection. Declaration public bool IsProperSubsetOf(CodePointSet other) Parameters Type Name Description CodePointSet other The collection to compare to the current set. Returns Type Description System.Boolean true if the current set is a proper subset of the specified collection; otherwise, false . | Improve this Doc View Source IsProperSupersetOf(IEnumerable<CodePoint>) Declaration public bool IsProperSupersetOf(IEnumerable<CodePoint> other) Parameters Type Name Description System.Collections.Generic.IEnumerable < CodePoint > other Returns Type Description System.Boolean | Improve this Doc View Source IsProperSupersetOf(CodePointSet) Determines whether the current code point set is a proper superset of a specified collection. Declaration public bool IsProperSupersetOf(CodePointSet other) Parameters Type Name Description CodePointSet other The collection to compare to the current set. Returns Type Description System.Boolean true if the current set is a proper superset of the specified collection; otherwise, false . | Improve this Doc View Source IsSubsetOf(IEnumerable<CodePoint>) Declaration public bool IsSubsetOf(IEnumerable<CodePoint> other) Parameters Type Name Description System.Collections.Generic.IEnumerable < CodePoint > other Returns Type Description System.Boolean | Improve this Doc View Source IsSubsetOf(CodePointSet) Determines whether the current code point set is a subset of a specified collection. Declaration public bool IsSubsetOf(CodePointSet other) Parameters Type Name Description CodePointSet other The collection to compare to the current set. Returns Type Description System.Boolean true if the current set is a subset of the specified collection; otherwise, false . | Improve this Doc View Source IsSupersetOf(IEnumerable<CodePoint>) Declaration public bool IsSupersetOf(IEnumerable<CodePoint> other) Parameters Type Name Description System.Collections.Generic.IEnumerable < CodePoint > other Returns Type Description System.Boolean | Improve this Doc View Source IsSupersetOf(CodePointSet) Determines whether the current code point set is a superset of a specified collection. Declaration public bool IsSupersetOf(CodePointSet other) Parameters Type Name Description CodePointSet other The collection to compare to the current set. Returns Type Description System.Boolean true if the current set is a superset of the specified collection; otherwise, false . | Improve this Doc View Source Overlaps(IEnumerable<CodePoint>) Declaration public bool Overlaps(IEnumerable<CodePoint> other) Parameters Type Name Description System.Collections.Generic.IEnumerable < CodePoint > other Returns Type Description System.Boolean | Improve this Doc View Source Overlaps(CodePointSet) Determines whether the current code point set overlaps with the specified collection. Declaration public bool Overlaps(CodePointSet other) Parameters Type Name Description CodePointSet other The collection to compare to the current set. Returns Type Description System.Boolean true if the current code point set and the specified collection share at least one common element; otherwise, false . | Improve this Doc View Source Remove(CodePoint) Declaration public bool Remove(CodePoint item) Parameters Type Name Description CodePoint item Returns Type Description System.Boolean | Improve this Doc View Source SetEquals(IEnumerable<CodePoint>) Declaration public bool SetEquals(IEnumerable<CodePoint> other) Parameters Type Name Description System.Collections.Generic.IEnumerable < CodePoint > other Returns Type Description System.Boolean | Improve this Doc View Source SetEquals(CodePointSet) Determines whether the current code point set and the specified collection contain the same elements. Declaration public bool SetEquals(CodePointSet other) Parameters Type Name Description CodePointSet other The collection to compare to the current set. Returns Type Description System.Boolean true if the sets are equal; otherwise, false . | Improve this Doc View Source SymmetricExceptWith(IEnumerable<CodePoint>) Declaration public void SymmetricExceptWith(IEnumerable<CodePoint> other) Parameters Type Name Description System.Collections.Generic.IEnumerable < CodePoint > other | Improve this Doc View Source SymmetricExceptWith(CodePointSet) Declaration public void SymmetricExceptWith(CodePointSet other) Parameters Type Name Description CodePointSet other | Improve this Doc View Source TryGetValue(CodePoint, out CodePoint) Declaration public bool TryGetValue(CodePoint equalValue, out CodePoint actualValue) Parameters Type Name Description CodePoint equalValue CodePoint actualValue Returns Type Description System.Boolean | Improve this Doc View Source UnionWith(IEnumerable<CodePoint>) Declaration public void UnionWith(IEnumerable<CodePoint> other) Parameters Type Name Description System.Collections.Generic.IEnumerable < CodePoint > other | Improve this Doc View Source UnionWith(CodePointSet) Declaration public void UnionWith(CodePointSet other) Parameters Type Name Description CodePointSet other Explicit Interface Implementations | Improve this Doc View Source ICollection<CodePoint>.Add(CodePoint) Declaration void ICollection<CodePoint>.Add(CodePoint item) Parameters Type Name Description CodePoint item | Improve this Doc View Source ICollection<CodePoint>.IsReadOnly Declaration bool ICollection<CodePoint>.IsReadOnly { get; } Returns Type Description System.Boolean | Improve this Doc View Source IEnumerable.GetEnumerator() Declaration IEnumerator IEnumerable.GetEnumerator() Returns Type Description System.Collections.IEnumerator Implements System.Collections.Generic.ISet<T> System.Collections.Generic.ICollection<T> IReadOnlySet<T> System.Collections.Generic.IReadOnlyCollection<T> System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable Extension Methods Enumerables.AsList<T>(IEnumerable<T>) Enumerables.OrIfEmpty<T>(IEnumerable<T>, IEnumerable<T>) Enumerables.ZipEqual<T1, T2, TResult>(IEnumerable<T1>, IEnumerable<T2>, Func<T1, T2, TResult>)"
  },
  "api/Virtlink.Utilib.Text.CodePoint.html": {
    "href": "api/Virtlink.Utilib.Text.CodePoint.html",
    "title": "Struct CodePoint | Virtlink Utilib library",
    "keywords": "Struct CodePoint A code point. Implements System.IEquatable < CodePoint > System.IComparable < CodePoint > System.IComparable System.IFormattable Inherited Members System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Virtlink.Utilib.Text Assembly : Virtlink.Utilib.dll Syntax public struct CodePoint : IEquatable<CodePoint>, IComparable<CodePoint>, IComparable, IFormattable Remarks This is a code point for no specific encoding. Constructors | Improve this Doc View Source CodePoint(Char) Initializes a new instance of the CodePoint class. Declaration public CodePoint(char value) Parameters Type Name Description System.Char value The value of the code point. | Improve this Doc View Source CodePoint(Int32) Initializes a new instance of the CodePoint class. Declaration public CodePoint(int value) Parameters Type Name Description System.Int32 value The value of the code point. | Improve this Doc View Source CodePoint(String) Initializes a new instance of the CodePoint class. Declaration public CodePoint(string value) Parameters Type Name Description System.String value The value of the code point. Remarks The value must be a single character or a surrogate pair. Properties | Improve this Doc View Source Category Gets the Unicode category of the code point. Declaration public UnicodeCategory Category { get; } Property Value Type Description System.Globalization.UnicodeCategory The Unicode category. | Improve this Doc View Source Eof Gets the code point representing the End-Of-File. Declaration public static CodePoint Eof { get; } Property Value Type Description CodePoint The code point representing the End-Of-File. | Improve this Doc View Source IsControl Gets whether the code point is categorized as a control character. Declaration public bool IsControl { get; } Property Value Type Description System.Boolean true when the code point is a control character; otherwise, false . | Improve this Doc View Source IsDigit Gets whether the code point is categorized as a digit. Declaration public bool IsDigit { get; } Property Value Type Description System.Boolean true when the code point is a digit; otherwise, false . | Improve this Doc View Source IsEof Gets whether the code point represents the End-Of-File. Declaration public bool IsEof { get; } Property Value Type Description System.Boolean true when the code point represents the End-Of-File; otherwise, false . | Improve this Doc View Source IsLetter Gets whether the code point is categorized as a letter. Declaration public bool IsLetter { get; } Property Value Type Description System.Boolean true when the code point is a letter; otherwise, false . Remarks The space is considered a separator or whitespace, not a letter. | Improve this Doc View Source IsLetterOrDigit Gets whether the code point is categorized as a letter or digit. Declaration public bool IsLetterOrDigit { get; } Property Value Type Description System.Boolean true when the code point is a letter or digit; otherwise, false . | Improve this Doc View Source IsLower Gets whether the code point is categorized as a lowercase letter. Declaration public bool IsLower { get; } Property Value Type Description System.Boolean true when the code point is a lowercase letter; otherwise, false . | Improve this Doc View Source IsNumber Gets whether the code point is categorized as a number. Declaration public bool IsNumber { get; } Property Value Type Description System.Boolean true when the code point is a number; otherwise, false . | Improve this Doc View Source IsPunctuation Gets whether the code point is categorized as punctuation. Declaration public bool IsPunctuation { get; } Property Value Type Description System.Boolean true when the code point is punctuation; otherwise, false . | Improve this Doc View Source IsSeparator Gets whether the code point is categorized as a separator. Declaration public bool IsSeparator { get; } Property Value Type Description System.Boolean true when the code point is a separator; otherwise, false . | Improve this Doc View Source IsSurrogatePair Gets whether the code point would be represented as a surrogate pair of System.Char . Declaration public bool IsSurrogatePair { get; } Property Value Type Description System.Boolean true when the code point is represented as a surrogate pair of System.Char ; otherwise, false . | Improve this Doc View Source IsSymbol Gets whether the code point is categorized as a symbol. Declaration public bool IsSymbol { get; } Property Value Type Description System.Boolean true when the code point is a symbol; otherwise, false . | Improve this Doc View Source IsUpper Gets whether the code point is categorized as an uppercase letter. Declaration public bool IsUpper { get; } Property Value Type Description System.Boolean true when the code point is an uppercase letter; otherwise, false . | Improve this Doc View Source IsWhitespace Gets whether the code point is categorized as whitespace. Declaration public bool IsWhitespace { get; } Property Value Type Description System.Boolean true when the code point is whitespace; otherwise, false . | Improve this Doc View Source MaxValue Gets the maximum Unicode code point. Declaration public static CodePoint MaxValue { get; } Property Value Type Description CodePoint The maximum Unicode code point. | Improve this Doc View Source MinValue Gets the minium Unicode code point. Declaration public static CodePoint MinValue { get; } Property Value Type Description CodePoint The minimum Unicode code point. | Improve this Doc View Source Value Gets the numeric value of the code point. Declaration public int Value { get; } Property Value Type Description System.Int32 The numeric value. Methods | Improve this Doc View Source CompareTo(Object) Declaration public int CompareTo(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Int32 | Improve this Doc View Source CompareTo(CodePoint) Declaration public int CompareTo(CodePoint other) Parameters Type Name Description CodePoint other Returns Type Description System.Int32 | Improve this Doc View Source Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean Overrides System.ValueType.Equals(System.Object) | Improve this Doc View Source Equals(CodePoint) Declaration public bool Equals(CodePoint other) Parameters Type Name Description CodePoint other Returns Type Description System.Boolean | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides System.ValueType.GetHashCode() | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.ValueType.ToString() | Improve this Doc View Source ToString(IFormatProvider) Formats the value of the current instance using the specified format provider. Declaration public string ToString(IFormatProvider formatProvider) Parameters Type Name Description System.IFormatProvider formatProvider The provider to use to format the value; or null to use the current culture. Returns Type Description System.String The value of the current instance in the specified format. | Improve this Doc View Source ToString(String) Formats the value of the current instance using the specified format. Declaration public string ToString(string format) Parameters Type Name Description System.String format The format to use; or null to use the default format defined for the type of the System.IFormattable implementation. Returns Type Description System.String The value of the current instance in the specified format. | Improve this Doc View Source ToString(String, IFormatProvider) Declaration public string ToString(string format, IFormatProvider formatProvider) Parameters Type Name Description System.String format System.IFormatProvider formatProvider Returns Type Description System.String Operators | Improve this Doc View Source Addition(CodePoint, Int32) Computes adding an offset to a CodePoint . Declaration public static CodePoint operator +(CodePoint codePoint, int offset) Parameters Type Name Description CodePoint codePoint The code point. System.Int32 offset The offset to add. Returns Type Description CodePoint The resulting code point. Exceptions Type Condition System.InvalidOperationException The addition would result in a code point outside the range of allowed values. | Improve this Doc View Source Decrement(CodePoint) Computes decrementing a CodePoint . Declaration public static CodePoint operator --(CodePoint codePoint) Parameters Type Name Description CodePoint codePoint The code point. Returns Type Description CodePoint The resulting code point. Exceptions Type Condition System.InvalidOperationException The subtraction would result in a code point outside the range of allowed values. | Improve this Doc View Source Equality(CodePoint, CodePoint) Returns a value that indicates whether two specified CodePoint objects are equal. Declaration public static bool operator ==(CodePoint left, CodePoint right) Parameters Type Name Description CodePoint left The first object to compare. CodePoint right The second object to compare. Returns Type Description System.Boolean true if left and right are equal; otherwise, false . | Improve this Doc View Source GreaterThan(CodePoint, CodePoint) Returns a value that indicates whether one CodePoint is greater than another. Declaration public static bool operator>(CodePoint left, CodePoint right) Parameters Type Name Description CodePoint left The first object to compare. CodePoint right The second object to compare. Returns Type Description System.Boolean true if left is greater than right ; otherwise, false . | Improve this Doc View Source GreaterThanOrEqual(CodePoint, CodePoint) Returns a value that indicates whether one CodePoint is greater than or equal to another. Declaration public static bool operator >=(CodePoint left, CodePoint right) Parameters Type Name Description CodePoint left The first object to compare. CodePoint right The second object to compare. Returns Type Description System.Boolean true if left is greater than or equal to right ; otherwise, false . | Improve this Doc View Source Increment(CodePoint) Computes incrementing a CodePoint . Declaration public static CodePoint operator ++(CodePoint codePoint) Parameters Type Name Description CodePoint codePoint The code point. Returns Type Description CodePoint The resulting code point. Exceptions Type Condition System.InvalidOperationException The addition would result in a code point outside the range of allowed values. | Improve this Doc View Source Inequality(CodePoint, CodePoint) Returns a value that indicates whether two specified CodePoint objects are not equal. Declaration public static bool operator !=(CodePoint left, CodePoint right) Parameters Type Name Description CodePoint left The first object to compare. CodePoint right The second object to compare. Returns Type Description System.Boolean true if left and right are not equal; otherwise, false . | Improve this Doc View Source LessThan(CodePoint, CodePoint) Returns a value that indicates whether one CodePoint is less than another. Declaration public static bool operator <(CodePoint left, CodePoint right) Parameters Type Name Description CodePoint left The first object to compare. CodePoint right The second object to compare. Returns Type Description System.Boolean true if left is less than right ; otherwise, false . | Improve this Doc View Source LessThanOrEqual(CodePoint, CodePoint) Returns a value that indicates whether one CodePoint is less than or equal to another. Declaration public static bool operator <=(CodePoint left, CodePoint right) Parameters Type Name Description CodePoint left The first object to compare. CodePoint right The second object to compare. Returns Type Description System.Boolean true if left is less than or equal to right ; otherwise, false . | Improve this Doc View Source Subtraction(CodePoint, Int32) Computes subtracting an offset from a CodePoint . Declaration public static CodePoint operator -(CodePoint codePoint, int offset) Parameters Type Name Description CodePoint codePoint The code point. System.Int32 offset The offset to subtarct. Returns Type Description CodePoint The resulting code point. Exceptions Type Condition System.InvalidOperationException The subtraction would result in a code point outside the range of allowed values. | Improve this Doc View Source Subtraction(CodePoint, CodePoint) Computes subtracting a CodePoint from another CodePoint . Declaration public static int operator -(CodePoint left, CodePoint right) Parameters Type Name Description CodePoint left The first code point. CodePoint right The second code point. Returns Type Description System.Int32 The resulting difference. Implements System.IEquatable<T> System.IComparable<T> System.IComparable System.IFormattable"
  },
  "api/Virtlink.Utilib.Diagnostics.html": {
    "href": "api/Virtlink.Utilib.Diagnostics.html",
    "title": "Namespace Virtlink.Utilib.Diagnostics | Virtlink Utilib library",
    "keywords": "Namespace Virtlink.Utilib.Diagnostics Classes CollectionDebugView<T> Provides a special view of the collection when using the debugger."
  },
  "api/Virtlink.Utilib.Diagnostics.CollectionDebugView-1.html": {
    "href": "api/Virtlink.Utilib.Diagnostics.CollectionDebugView-1.html",
    "title": "Class CollectionDebugView<T> | Virtlink Utilib library",
    "keywords": "Class CollectionDebugView<T> Provides a special view of the collection when using the debugger. Inheritance System.Object CollectionDebugView<T> Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Virtlink.Utilib.Diagnostics Assembly : Virtlink.Utilib.dll Syntax public sealed class CollectionDebugView<T> Type Parameters Name Description T Constructors | Improve this Doc View Source CollectionDebugView(IEnumerable<T>) Initializes a new instance of the CollectionDebugView<T> class. Declaration public CollectionDebugView(IEnumerable<T> collection) Parameters Type Name Description System.Collections.Generic.IEnumerable <T> collection Properties | Improve this Doc View Source Items Gets the array of items to display. Declaration public T[] Items { get; } Property Value Type Description T[] An array of items."
  },
  "api/Virtlink.Utilib.Collections.ListComparer-1.html": {
    "href": "api/Virtlink.Utilib.Collections.ListComparer-1.html",
    "title": "Class ListComparer<T> | Virtlink Utilib library",
    "keywords": "Class ListComparer<T> Compares two lists (ordered collections which may contain duplicates) for equality. Inheritance System.Object ListComparer<T> Implements System.Collections.Generic.IEqualityComparer < System.Collections.Generic.IEnumerable <T>> Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Virtlink.Utilib.Collections Assembly : Virtlink.Utilib.dll Syntax public sealed class ListComparer<T> : IEqualityComparer<IEnumerable<T>> Type Parameters Name Description T The type of elements in the lists. Constructors | Improve this Doc View Source ListComparer() Initializes a new instance of the ListComparer<T> class. Declaration public ListComparer() | Improve this Doc View Source ListComparer(IEqualityComparer<T>) Initializes a new instance of the ListComparer<T> class. Declaration public ListComparer(IEqualityComparer<T> elementComparer) Parameters Type Name Description System.Collections.Generic.IEqualityComparer <T> elementComparer The comparer used to compare elements. Properties | Improve this Doc View Source Default Returns a default instance of the ListComparer<T> . Declaration public static ListComparer<T> Default { get; } Property Value Type Description ListComparer <T> The default instance of the ListComparer<T> class for type T . Methods | Improve this Doc View Source Equals(IEnumerable<T>, IEnumerable<T>) Declaration public bool Equals(IEnumerable<T> x, IEnumerable<T> y) Parameters Type Name Description System.Collections.Generic.IEnumerable <T> x System.Collections.Generic.IEnumerable <T> y Returns Type Description System.Boolean | Improve this Doc View Source GetHashCode(IEnumerable<T>) Declaration public int GetHashCode(IEnumerable<T> enumerable) Parameters Type Name Description System.Collections.Generic.IEnumerable <T> enumerable Returns Type Description System.Int32 Implements System.Collections.Generic.IEqualityComparer<T>"
  },
  "api/Virtlink.Utilib.Collections.Graphs.TopologicalTraversal.html": {
    "href": "api/Virtlink.Utilib.Collections.Graphs.TopologicalTraversal.html",
    "title": "Class TopologicalTraversal | Virtlink Utilib library",
    "keywords": "Class TopologicalTraversal Topological traversal. Inheritance System.Object TopologicalTraversal Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Virtlink.Utilib.Collections.Graphs Assembly : Virtlink.Utilib.dll Syntax public static class TopologicalTraversal Methods | Improve this Doc View Source Traverse<T>(T) Traverses a tree whose nodes implement the INode<T> interface. Declaration public static IEnumerable<T> Traverse<T>(T root)where T : INode<T> Parameters Type Name Description T root The root of the tree. Returns Type Description System.Collections.Generic.IEnumerable <T> An enumerable that returns the tree's nodes in depth-first pre-order. Type Parameters Name Description T The type of nodes. | Improve this Doc View Source Traverse<T>(T, Func<T, IReadOnlyCollection<T>>) Traverses a tree where the children of a node are returned by a lambda function. Declaration public static IEnumerable<T> Traverse<T>(T root, Func<T, IReadOnlyCollection<T>> childrenGetter) Parameters Type Name Description T root The root of the tree. System.Func <T, System.Collections.Generic.IReadOnlyCollection <T>> childrenGetter Function that returns the children of the node. Returns Type Description System.Collections.Generic.IEnumerable <T> An enumerable that returns the tree's nodes in depth-first pre-order. Type Parameters Name Description T The type of nodes."
  },
  "api/Virtlink.Utilib.Collections.Graphs.BreadthFirstTraversal.html": {
    "href": "api/Virtlink.Utilib.Collections.Graphs.BreadthFirstTraversal.html",
    "title": "Class BreadthFirstTraversal | Virtlink Utilib library",
    "keywords": "Class BreadthFirstTraversal Breadth-first traversal. Inheritance System.Object BreadthFirstTraversal Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Virtlink.Utilib.Collections.Graphs Assembly : Virtlink.Utilib.dll Syntax public static class BreadthFirstTraversal Methods | Improve this Doc View Source Traverse<T>(T) Traverses a tree whose nodes implement the INode<T> interface. Declaration public static IEnumerable<T> Traverse<T>(T root)where T : INode<T> Parameters Type Name Description T root The root of the tree. Returns Type Description System.Collections.Generic.IEnumerable <T> An enumerable that returns the tree's nodes in depth-first pre-order. Type Parameters Name Description T The type of nodes. | Improve this Doc View Source Traverse<T>(T, Func<T, IReadOnlyCollection<T>>) Traverses a tree where the children of a node are returned by a lambda function. Declaration public static IEnumerable<T> Traverse<T>(T root, Func<T, IReadOnlyCollection<T>> childrenGetter) Parameters Type Name Description T root The root of the tree. System.Func <T, System.Collections.Generic.IReadOnlyCollection <T>> childrenGetter Function that returns the children of the node. Returns Type Description System.Collections.Generic.IEnumerable <T> An enumerable that returns the tree's nodes in depth-first pre-order. Type Parameters Name Description T The type of nodes."
  },
  "api/Virtlink.Utilib.Collections.Enumerables.html": {
    "href": "api/Virtlink.Utilib.Collections.Enumerables.html",
    "title": "Class Enumerables | Virtlink Utilib library",
    "keywords": "Class Enumerables Functions for working with enumerables. Inheritance System.Object Enumerables Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Virtlink.Utilib.Collections Assembly : Virtlink.Utilib.dll Syntax public static class Enumerables Methods | Improve this Doc View Source AsList<T>(IEnumerable<T>) Returns the enumerable as a list, either by casting it or by wrapping it in a smart list. Declaration public static IReadOnlyList<T> AsList<T>(this IEnumerable<T> enumerable) Parameters Type Name Description System.Collections.Generic.IEnumerable <T> enumerable The enumerable to wrap. Returns Type Description System.Collections.Generic.IReadOnlyList <T> The wrapped enumerable. Type Parameters Name Description T The type of elements in the enumerable. Remarks The smart list tries to not fully enumerate the given enumerable whenever possible, and will ensure the enumerable is enumerated only once. | Improve this Doc View Source Of<T>() Returns an empty enumerable. Declaration public static IEnumerable<T> Of<T>() Returns Type Description System.Collections.Generic.IEnumerable <T> The empty enumerable. Type Parameters Name Description T The type of elements in the enumerable. | Improve this Doc View Source Of<T>(T) Returns a enumerable with one value. Declaration public static IEnumerable<T> Of<T>(T value) Parameters Type Name Description T value The value. Returns Type Description System.Collections.Generic.IEnumerable <T> The singleton enumerable. Type Parameters Name Description T The type of elements in the enumerable. | Improve this Doc View Source Of<T>(T, T) Returns a enumerable with two values. Declaration public static IEnumerable<T> Of<T>(T value1, T value2) Parameters Type Name Description T value1 The first value. T value2 The second value. Returns Type Description System.Collections.Generic.IEnumerable <T> The enumerable. Type Parameters Name Description T The type of elements in the enumerable. | Improve this Doc View Source Of<T>(T, T, T) Returns a enumerable with three values. Declaration public static IEnumerable<T> Of<T>(T value1, T value2, T value3) Parameters Type Name Description T value1 The first value. T value2 The second value. T value3 The third value. Returns Type Description System.Collections.Generic.IEnumerable <T> The enumerable. Type Parameters Name Description T The type of elements in the enumerable. | Improve this Doc View Source Of<T>(T[]) Returns a enumerable with multiple values. Declaration public static IEnumerable<T> Of<T>(params T[] values) Parameters Type Name Description T[] values The values. Returns Type Description System.Collections.Generic.IEnumerable <T> The enumerable. Type Parameters Name Description T The type of elements in the enumerable. | Improve this Doc View Source OrIfEmpty<T>(IEnumerable<T>, IEnumerable<T>) Returns the elements of the first sequence, or the elements of the second sequence when the first sequence is empty. Declaration public static IEnumerable<T> OrIfEmpty<T>(this IEnumerable<T> source, IEnumerable<T> otherwise) Parameters Type Name Description System.Collections.Generic.IEnumerable <T> source The first sequence. System.Collections.Generic.IEnumerable <T> otherwise The second sequence, only to be returned when the first sequence is empty. Returns Type Description System.Collections.Generic.IEnumerable <T> The resulting enumerable. Type Parameters Name Description T The type of elements in the sequences. | Improve this Doc View Source TryGetCount(IEnumerable) Attempts to get the number of elements in the enumerable, only if it can be determined efficiently. Declaration public static int? TryGetCount(IEnumerable enumerable) Parameters Type Name Description System.Collections.IEnumerable enumerable The enumerable for which tog et the count. Returns Type Description System.Nullable < System.Int32 > The number of elements; or null when it could not be determined without enumerating all elements. | Improve this Doc View Source TryGetCount<T>(IEnumerable<T>) Attempts to get the number of elements in the enumerable, only if it can be determined efficiently. Declaration public static int? TryGetCount<T>(IEnumerable<T> enumerable) Parameters Type Name Description System.Collections.Generic.IEnumerable <T> enumerable The enumerable for which to get the count. Returns Type Description System.Nullable < System.Int32 > The number of elements; or null when it could not be determined without enumerating all elements. Type Parameters Name Description T The type of elements in the enumerable. | Improve this Doc View Source ZipEqual<T1, T2, TResult>(IEnumerable<T1>, IEnumerable<T2>, Func<T1, T2, TResult>) Zips two sequences together, like Zip, but enforces that both sequences have equal lengths. Declaration public static IEnumerable<TResult> ZipEqual<T1, T2, TResult>(this IEnumerable<T1> first, IEnumerable<T2> second, Func<T1, T2, TResult> resultSelector) Parameters Type Name Description System.Collections.Generic.IEnumerable <T1> first System.Collections.Generic.IEnumerable <T2> second System.Func <T1, T2, TResult> resultSelector Returns Type Description System.Collections.Generic.IEnumerable <TResult> The resulting sequence. Type Parameters Name Description T1 The type of elements in the first sequence. T2 The type of elements in the second sequence. TResult The result selector."
  }
}